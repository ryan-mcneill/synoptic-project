{"ast":null,"code":"import FastAverageColor from \"fast-average-color\";\nimport { SET_BACKGROUND, SET_SONG, TOGGLE_PLAYING } from \"../types\";\nexport const setCurrentSong = data => {\n  return {\n    type: SET_SONG,\n    data\n  };\n};\nexport const setBackground = data => ({\n  type: SET_BACKGROUND,\n  data\n});\nexport const togglePlaying = isPlaying => ({\n  type: TOGGLE_PLAYING,\n  isPlaying\n});\nexport const changeSong = ({\n  type,\n  id\n}) => {\n  return (dispatch, getState) => {\n    var _state$currentSong$da, _state$playlist$data;\n\n    const state = getState();\n    const songId = id ? id : (_state$currentSong$da = state.currentSong.data) === null || _state$currentSong$da === void 0 ? void 0 : _state$currentSong$da._id;\n    let playlistIndex = -1;\n    (_state$playlist$data = state.playlist.data) === null || _state$playlist$data === void 0 ? void 0 : _state$playlist$data.forEach(({\n      _id\n    }, index) => {\n      if (songId === _id) playlistIndex = index;\n    });\n\n    if (state.playlist.data && playlistIndex !== -1 && type === \"NEXT\" && playlistIndex < state.playlist.data.length - 1) {\n      var _state$playlist;\n\n      dispatch(setCurrentSong((_state$playlist = state.playlist) === null || _state$playlist === void 0 ? void 0 : _state$playlist.data[playlistIndex + 1]));\n    } else if (state.playlist.data && playlistIndex !== -1 && type === \"PREV\" && playlistIndex > 0) {\n      var _state$playlist2;\n\n      dispatch(setCurrentSong((_state$playlist2 = state.playlist) === null || _state$playlist2 === void 0 ? void 0 : _state$playlist2.data[playlistIndex - 1]));\n    } else if (id && state.playlist.data && playlistIndex !== -1) {\n      var _state$playlist3;\n\n      dispatch(setCurrentSong((_state$playlist3 = state.playlist) === null || _state$playlist3 === void 0 ? void 0 : _state$playlist3.data[playlistIndex]));\n    }\n  };\n};\nexport const getBackground = ({\n  id\n}) => {\n  return dispatch => {\n    const fac = new FastAverageColor();\n    fac.getColorAsync(`/api/album/art/${id}`).then(color => {\n      const {\n        isLight,\n        isDark,\n        hex: colour\n      } = color;\n      dispatch(setBackground({\n        isLight,\n        isDark,\n        colour\n      }));\n    }).catch(error => {\n      console.error(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/currentSongActions.ts"],"names":["FastAverageColor","SET_BACKGROUND","SET_SONG","TOGGLE_PLAYING","setCurrentSong","data","type","setBackground","togglePlaying","isPlaying","changeSong","id","dispatch","getState","state","songId","currentSong","_id","playlistIndex","playlist","forEach","index","length","getBackground","fac","getColorAsync","then","color","isLight","isDark","hex","colour","catch","error","console","message"],"mappings":"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","sourcesContent":["import { Dispatch } from \"redux\";\nimport FastAverageColor from \"fast-average-color\";\nimport {\n  Background,\n  ChangeSong,\n  CurrentSongActions,\n  SET_BACKGROUND,\n  SET_SONG,\n  Song, State,\n  TOGGLE_PLAYING\n} from \"../types\";\n\nexport const setCurrentSong = (data: Song): CurrentSongActions => {\n  return {\n    type: SET_SONG,\n    data\n  };\n};\n\nexport const setBackground = (data: Background): CurrentSongActions => ({\n  type: SET_BACKGROUND,\n  data\n});\n\nexport const togglePlaying = (isPlaying?: boolean): CurrentSongActions => ({\n  type: TOGGLE_PLAYING,\n  isPlaying\n});\n\nexport const changeSong = ({ type, id }: ChangeSong) => {\n  return (dispatch: Dispatch, getState: () => State) => {\n    const state = getState();\n    const songId = id ? id : state.currentSong.data?._id;\n    let playlistIndex = -1;\n\n    state.playlist.data?.forEach(({ _id }: { _id: string }, index: number) => {\n      if (songId === _id) playlistIndex = index;\n    });\n    if (\n      state.playlist.data &&\n      playlistIndex !== -1 &&\n      type === \"NEXT\" &&\n      playlistIndex < state.playlist.data.length - 1\n    ) {\n      dispatch(setCurrentSong(state.playlist?.data[playlistIndex + 1]));\n    } else if (\n      state.playlist.data &&\n      playlistIndex !== -1 &&\n      type === \"PREV\" &&\n      playlistIndex > 0\n    ) {\n      dispatch(setCurrentSong(state.playlist?.data[playlistIndex - 1]));\n    } else if (id && state.playlist.data && playlistIndex !== -1) {\n      dispatch(setCurrentSong(state.playlist?.data[playlistIndex]));\n    }\n  };\n};\n\nexport const getBackground = ({ id }: { id: string }) => {\n  return (dispatch: Dispatch) => {\n    const fac = new FastAverageColor();\n\n    fac\n      .getColorAsync(`/api/album/art/${id}`)\n      .then((color: IFastAverageColorResult) => {\n        const { isLight, isDark, hex: colour } = color;\n        dispatch(setBackground({ isLight, isDark, colour }));\n      })\n      .catch((error: Error) => {\n        console.error(error.message);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}