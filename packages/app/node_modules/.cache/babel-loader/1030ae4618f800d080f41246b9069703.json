{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Songs.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSelectedTab } from \"../../store/actions\";\nimport { updatePlaylist } from \"../../store/actions/playlistActions\";\nimport Accordion from \"./Accordion\";\n\nconst mapDispatchToProps = dispatch => ({\n  updatePlaylist: ({\n    previous,\n    current,\n    next\n  }) => dispatch(updatePlaylist({\n    previous,\n    current,\n    next\n  })),\n  setSelectedTab: tab => dispatch(setSelectedTab(tab))\n});\n\nconst mapStateToProps = state => ({\n  artists: state.artists.data\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst Artists = ({\n  artists,\n  setSelectedTab,\n  updatePlaylist\n}) => {\n  const handleClick = id => {\n    if (artists) {\n      const current = artists[id].songs[0];\n      const next = artists[id].songs.slice(1, artists[id].songs.length);\n      updatePlaylist({\n        previous: [],\n        current,\n        next\n      });\n      setSelectedTab(\"PLAYLIST\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, artists && artists !== {} ? Object.keys(artists).map(id => /*#__PURE__*/React.createElement(Accordion, {\n    title: artists[id].name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 42\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Sorry no artists have been loaded.\"));\n};\n\nexport default connector(Artists); // <InfoTile\n//   key={`info-tile-${id}`}\n//   title={artists[id].name}\n//   onClick={() => handleClick(id)}\n// />","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Songs.tsx"],"names":["React","connect","setSelectedTab","updatePlaylist","Accordion","mapDispatchToProps","dispatch","previous","current","next","tab","mapStateToProps","state","artists","data","connector","Artists","handleClick","id","songs","slice","length","Object","keys","map","name","fontSize","textAlign"],"mappings":";AAAA,OAAOA,KAAP,MAAwC,OAAxC;AAGA,SAASC,OAAT,QAAwC,aAAxC;AAGA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,cAAT,QAA+B,qCAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmD;AAC5EH,EAAAA,cAAc,EAAE,CAAC;AAAEI,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAAD,KACdH,QAAQ,CAACH,cAAc,CAAC;AAAEI,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAAD,CAAf,CAFkE;AAG5EP,EAAAA,cAAc,EAAGQ,GAAD,IAAeJ,QAAQ,CAACJ,cAAc,CAACQ,GAAD,CAAf;AAHqC,CAAnD,CAA3B;;AAMA,MAAMC,eAAe,GAAIC,KAAD,KAAmB;AACzCC,EAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,CAAcC;AADkB,CAAnB,CAAxB;;AAIA,MAAMC,SAAS,GAAGd,OAAO,CAACU,eAAD,EAAkBN,kBAAlB,CAAzB;;AAIA,MAAMW,OAA2B,GAAG,CAAC;AACnCH,EAAAA,OADmC;AAEnCX,EAAAA,cAFmC;AAGnCC,EAAAA;AAHmC,CAAD,KAIhB;AAClB,QAAMc,WAAW,GAAIC,EAAD,IAAgB;AAClC,QAAIL,OAAJ,EAAa;AACX,YAAML,OAAO,GAAGK,OAAO,CAACK,EAAD,CAAP,CAAYC,KAAZ,CAAkB,CAAlB,CAAhB;AACA,YAAMV,IAAI,GAAGI,OAAO,CAACK,EAAD,CAAP,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwB,CAAxB,EAA2BP,OAAO,CAACK,EAAD,CAAP,CAAYC,KAAZ,CAAkBE,MAA7C,CAAb;AAEAlB,MAAAA,cAAc,CAAC;AAAEI,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA;AAAzB,OAAD,CAAd;AACAP,MAAAA,cAAc,CAAC,UAAD,CAAd;AACD;AACF,GARD;;AAUA,sBACE,0CACGW,OAAO,IAAIA,OAAO,KAAK,EAAvB,GACCS,MAAM,CAACC,IAAP,CAAYV,OAAZ,EAAqBW,GAArB,CAA0BN,EAAD,iBAAQ,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEL,OAAO,CAACK,EAAD,CAAP,CAAYO,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjC,CADD,gBAGC;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAJJ,CADF;AAWD,CA1BD;;AA4BA,eAAeZ,SAAS,CAACC,OAAD,CAAxB,C,CAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { FC, ReactElement } from \"react\";\nimport { InfoTile } from \"./\";\nimport { PlaylistState, State, Tabs } from \"../../store/types\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { setSelectedTab } from \"../../store/actions\";\nimport { updatePlaylist } from \"../../store/actions/playlistActions\";\nimport Accordion from \"./Accordion\";\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  updatePlaylist: ({ previous, current, next }: PlaylistState) =>\n    dispatch(updatePlaylist({ previous, current, next })),\n  setSelectedTab: (tab: Tabs) => dispatch(setSelectedTab(tab))\n});\n\nconst mapStateToProps = (state: State) => ({\n  artists: state.artists.data\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst Artists: FC<PropsFromRedux> = ({\n  artists,\n  setSelectedTab,\n  updatePlaylist\n}): ReactElement => {\n  const handleClick = (id: string) => {\n    if (artists) {\n      const current = artists[id].songs[0];\n      const next = artists[id].songs.slice(1, artists[id].songs.length);\n\n      updatePlaylist({ previous: [], current, next });\n      setSelectedTab(\"PLAYLIST\");\n    }\n  };\n\n  return (\n    <>\n      {artists && artists !== {} ? (\n        Object.keys(artists).map((id) => <Accordion title={artists[id].name} />)\n      ) : (\n        <div style={{ fontSize: \"48px\", textAlign: \"center\" }}>\n          Sorry no artists have been loaded.\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default connector(Artists);\n\n// <InfoTile\n//   key={`info-tile-${id}`}\n//   title={artists[id].name}\n//   onClick={() => handleClick(id)}\n// />\n"]},"metadata":{},"sourceType":"module"}