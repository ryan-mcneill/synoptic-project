{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Playlist.tsx\";\nimport React from \"react\";\nimport { InfoTile } from \"./\";\nimport { connect } from \"react-redux\";\nimport { artistsToString } from \"../../utils\";\nimport { setCurrentSong, setIsOpen } from \"../../store/actions\";\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentSong: song => dispatch(setCurrentSong(song))\n});\n\nconst mapStateToProps = state => ({\n  current: state.playlist.current,\n  next: state.playlist.next,\n  previous: state.playlist.previous,\n  selectedTab: state.menu.selectedTab\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst Playlist = ({\n  current,\n  next,\n  previous,\n  selectedTab\n}) => {\n  const handleClick = id => {\n    console.log(\"hello\");\n\n    if (current) {\n      console.log(\"here\");\n      setCurrentSong(current);\n      setIsOpen(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, selectedTab === \"PLAYLIST\" && previous && previous.length > 0 && previous.map(playlist => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${playlist._id}`,\n    title: playlist.name,\n    subtitle: artistsToString(playlist.artists),\n    onClick: () => handleClick(playlist._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  })), selectedTab === \"PLAYLIST\" && current && /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${current._id}`,\n    title: current.name,\n    subtitle: artistsToString(current.artists),\n    onClick: () => handleClick(current._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), selectedTab === \"PLAYLIST\" && next && next.length > 0 && next.map(playlist => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${playlist._id}`,\n    title: playlist.name,\n    subtitle: artistsToString(playlist.artists),\n    onClick: () => handleClick(playlist._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default connector(Playlist);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Playlist.tsx"],"names":["React","InfoTile","connect","artistsToString","setCurrentSong","setIsOpen","mapDispatchToProps","dispatch","song","mapStateToProps","state","current","playlist","next","previous","selectedTab","menu","connector","Playlist","handleClick","id","console","log","length","map","_id","name","artists"],"mappings":";AAAA,OAAOA,KAAP,MAAwC,OAAxC;AACA,SAASC,QAAT,QAAyB,IAAzB;AAEA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,eAAT,QAAgC,aAAhC;AAGA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,qBAA1C;;AAEA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmD;AAC5EH,EAAAA,cAAc,EAAGI,IAAD,IAAgBD,QAAQ,CAACH,cAAc,CAACI,IAAD,CAAf;AADoC,CAAnD,CAA3B;;AAIA,MAAMC,eAAe,GAAIC,KAAD,KAAmB;AACzCC,EAAAA,OAAO,EAAED,KAAK,CAACE,QAAN,CAAeD,OADiB;AAEzCE,EAAAA,IAAI,EAAEH,KAAK,CAACE,QAAN,CAAeC,IAFoB;AAGzCC,EAAAA,QAAQ,EAAEJ,KAAK,CAACE,QAAN,CAAeE,QAHgB;AAIzCC,EAAAA,WAAW,EAAEL,KAAK,CAACM,IAAN,CAAWD;AAJiB,CAAnB,CAAxB;;AAOA,MAAME,SAAS,GAAGf,OAAO,CAACO,eAAD,EAAkBH,kBAAlB,CAAzB;;AAIA,MAAMY,QAA4B,GAAG,CAAC;AACpCP,EAAAA,OADoC;AAEpCE,EAAAA,IAFoC;AAGpCC,EAAAA,QAHoC;AAIpCC,EAAAA;AAJoC,CAAD,KAKjB;AAClB,QAAMI,WAAW,GAAIC,EAAD,IAAgB;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,QAAIX,OAAJ,EAAa;AACXU,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAlB,MAAAA,cAAc,CAACO,OAAD,CAAd;AACAN,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF,GAPD;;AAQA,sBACE,0CACGU,WAAW,KAAK,UAAhB,IACCD,QADD,IAECA,QAAQ,CAACS,MAAT,GAAkB,CAFnB,IAGCT,QAAQ,CAACU,GAAT,CAAcZ,QAAD,iBACX,oBAAC,QAAD;AACE,IAAA,GAAG,EAAG,aAAYA,QAAQ,CAACa,GAAI,EADjC;AAEE,IAAA,KAAK,EAAEb,QAAQ,CAACc,IAFlB;AAGE,IAAA,QAAQ,EAAEvB,eAAe,CAACS,QAAQ,CAACe,OAAV,CAH3B;AAIE,IAAA,OAAO,EAAE,MAAMR,WAAW,CAACP,QAAQ,CAACa,GAAV,CAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJJ,EAYGV,WAAW,KAAK,UAAhB,IAA8BJ,OAA9B,iBACC,oBAAC,QAAD;AACE,IAAA,GAAG,EAAG,aAAYA,OAAO,CAACc,GAAI,EADhC;AAEE,IAAA,KAAK,EAAEd,OAAO,CAACe,IAFjB;AAGE,IAAA,QAAQ,EAAEvB,eAAe,CAACQ,OAAO,CAACgB,OAAT,CAH3B;AAIE,IAAA,OAAO,EAAE,MAAMR,WAAW,CAACR,OAAO,CAACc,GAAT,CAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,EAoBGV,WAAW,KAAK,UAAhB,IACCF,IADD,IAECA,IAAI,CAACU,MAAL,GAAc,CAFf,IAGCV,IAAI,CAACW,GAAL,CAAUZ,QAAD,iBACP,oBAAC,QAAD;AACE,IAAA,GAAG,EAAG,aAAYA,QAAQ,CAACa,GAAI,EADjC;AAEE,IAAA,KAAK,EAAEb,QAAQ,CAACc,IAFlB;AAGE,IAAA,QAAQ,EAAEvB,eAAe,CAACS,QAAQ,CAACe,OAAV,CAH3B;AAIE,IAAA,OAAO,EAAE,MAAMR,WAAW,CAACP,QAAQ,CAACa,GAAV,CAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAvBJ,CADF;AAkCD,CAhDD;;AAkDA,eAAeR,SAAS,CAACC,QAAD,CAAxB","sourcesContent":["import React, { FC, ReactElement } from \"react\";\nimport { InfoTile } from \"./\";\nimport { Song, State } from \"../../store/types\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { artistsToString } from \"../../utils\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { setCurrentSong, setIsOpen } from \"../../store/actions\";\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  setCurrentSong: (song: Song) => dispatch(setCurrentSong(song))\n});\n\nconst mapStateToProps = (state: State) => ({\n  current: state.playlist.current,\n  next: state.playlist.next,\n  previous: state.playlist.previous,\n  selectedTab: state.menu.selectedTab\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst Playlist: FC<PropsFromRedux> = ({\n  current,\n  next,\n  previous,\n  selectedTab\n}): ReactElement => {\n  const handleClick = (id: string) => {\n    console.log(\"hello\")\n    if (current) {\n      console.log(\"here\")\n      setCurrentSong(current);\n      setIsOpen(false);\n    }\n  };\n  return (\n    <>\n      {selectedTab === \"PLAYLIST\" &&\n        previous &&\n        previous.length > 0 &&\n        previous.map((playlist) => (\n          <InfoTile\n            key={`info-tile-${playlist._id}`}\n            title={playlist.name}\n            subtitle={artistsToString(playlist.artists)}\n            onClick={() => handleClick(playlist._id)}\n          />\n        ))}\n      {selectedTab === \"PLAYLIST\" && current && (\n        <InfoTile\n          key={`info-tile-${current._id}`}\n          title={current.name}\n          subtitle={artistsToString(current.artists)}\n          onClick={() => handleClick(current._id)}\n        />\n      )}\n      {selectedTab === \"PLAYLIST\" &&\n        next &&\n        next.length > 0 &&\n        next.map((playlist) => (\n          <InfoTile\n            key={`info-tile-${playlist._id}`}\n            title={playlist.name}\n            subtitle={artistsToString(playlist.artists)}\n            onClick={() => handleClick(playlist._id)}\n          />\n        ))}\n    </>\n  );\n};\n\nexport default connector(Playlist);\n"]},"metadata":{},"sourceType":"module"}