{"ast":null,"code":"import get from \"axios\";\nimport { FETCH_ALBUMS, FETCH_ALBUMS_FAILURE, FETCH_ALBUMS_SUCCESS } from \"../types\";\n\nconst fetchAlbumsAction = () => ({\n  type: FETCH_ALBUMS\n});\n\nconst fetchAlbumsFailure = error => ({\n  type: FETCH_ALBUMS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchAlbumsSuccess = albums => ({\n  type: FETCH_ALBUMS_SUCCESS,\n  payload: albums\n});\n\nexport const fetchAlbums = () => {\n  return dispatch => {\n    dispatch(fetchAlbumsAction());\n    get(`/api/albums`).then(albumResponse => {\n      Promise.all(albumResponse.data.map(album => get(`/api/songs/album/${album._id}`).then(songResponse => ({\n        [album._id]: songResponse.data\n      })))).then(songs => {\n        const flatSongs = songs.reduce((acc, curr) => {\n          acc = { ...acc,\n            ...curr\n          };\n          return acc;\n        }, {});\n        const albumsData = albumResponse.data.reduce((acc, {\n          _id,\n          name\n        }) => {\n          acc = { ...acc,\n            [_id]: {\n              name,\n              songs: flatSongs[_id]\n            }\n          };\n          return acc;\n        }, {});\n        dispatch(fetchAlbumsSuccess(albumsData));\n      }).catch(err => {\n        dispatch(fetchAlbumsFailure(err.message));\n      });\n    }).catch(err => {\n      dispatch(fetchAlbumsFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/albumsActions.ts"],"names":["get","FETCH_ALBUMS","FETCH_ALBUMS_FAILURE","FETCH_ALBUMS_SUCCESS","fetchAlbumsAction","type","fetchAlbumsFailure","error","payload","fetchAlbumsSuccess","albums","fetchAlbums","dispatch","then","albumResponse","Promise","all","data","map","album","_id","songResponse","songs","flatSongs","reduce","acc","curr","albumsData","name","catch","err","message"],"mappings":"AAAA,OAAOA,GAAP,MAAmC,OAAnC;AAEA,SAEEC,YAFF,EAGEC,oBAHF,EAIEC,oBAJF,QASO,UATP;;AAWA,MAAMC,iBAAmD,GAAG,OAAO;AACjEC,EAAAA,IAAI,EAAEJ;AAD2D,CAAP,CAA5D;;AAIA,MAAMK,kBAA2D,GAC/DC,KADkE,KAE9D;AACJF,EAAAA,IAAI,EAAEH,oBADF;AAEJM,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAFL,CAF8D,CAApE;;AAOA,MAAME,kBAA2D,GAC/DC,MADkE,KAE9D;AACJL,EAAAA,IAAI,EAAEF,oBADF;AAEJK,EAAAA,OAAO,EAAEE;AAFL,CAF8D,CAApE;;AAOA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AAEAJ,IAAAA,GAAG,CAAE,aAAF,CAAH,CACGa,IADH,CACSC,aAAD,IAA0C;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CACEF,aAAa,CAACG,IAAd,CAAmBC,GAAnB,CAAwBC,KAAD,IACrBnB,GAAG,CAAE,oBAAmBmB,KAAK,CAACC,GAAI,EAA/B,CAAH,CAAqCP,IAArC,CAA2CQ,YAAD,KAAmB;AAC3D,SAACF,KAAK,CAACC,GAAP,GAAaC,YAAY,CAACJ;AADiC,OAAnB,CAA1C,CADF,CADF,EAOGJ,IAPH,CAOSS,KAAD,IAAW;AACf,cAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC5CD,UAAAA,GAAG,GAAG,EAAE,GAAGA,GAAL;AAAU,eAAGC;AAAb,WAAN;AACA,iBAAOD,GAAP;AACD,SAHiB,EAGf,EAHe,CAAlB;AAKA,cAAME,UAAU,GAAGb,aAAa,CAACG,IAAd,CAAmBO,MAAnB,CACjB,CAACC,GAAD,EAAU;AAAEL,UAAAA,GAAF;AAAOQ,UAAAA;AAAP,SAAV,KAAkC;AAChCH,UAAAA,GAAG,GAAG,EACJ,GAAGA,GADC;AAEJ,aAACL,GAAD,GAAO;AAAEQ,cAAAA,IAAF;AAAQN,cAAAA,KAAK,EAAEC,SAAS,CAACH,GAAD;AAAxB;AAFH,WAAN;AAIA,iBAAOK,GAAP;AACD,SAPgB,EAQjB,EARiB,CAAnB;AAUAb,QAAAA,QAAQ,CAACH,kBAAkB,CAACkB,UAAD,CAAnB,CAAR;AACD,OAxBH,EAyBGE,KAzBH,CAyBUC,GAAD,IAAgB;AACrBlB,QAAAA,QAAQ,CAACN,kBAAkB,CAACwB,GAAG,CAACC,OAAL,CAAnB,CAAR;AACD,OA3BH;AA4BD,KA9BH,EA+BGF,KA/BH,CA+BUC,GAAD,IAAgB;AACrBlB,MAAAA,QAAQ,CAACN,kBAAkB,CAACwB,GAAG,CAACC,OAAL,CAAnB,CAAR;AACD,KAjCH;AAkCD,GArCD;AAsCD,CAvCM","sourcesContent":["import get, { AxiosResponse } from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  BasicDetails,\n  FETCH_ALBUMS,\n  FETCH_ALBUMS_FAILURE,\n  FETCH_ALBUMS_SUCCESS,\n  FetchAlbumsAction,\n  FetchAlbumsFailureAction,\n  FetchAlbumsSuccessAction,\n  Song\n} from \"../types\";\n\nconst fetchAlbumsAction: ActionCreator<FetchAlbumsAction> = () => ({\n  type: FETCH_ALBUMS\n});\n\nconst fetchAlbumsFailure: ActionCreator<FetchAlbumsFailureAction> = (\n  error\n) => ({\n  type: FETCH_ALBUMS_FAILURE,\n  payload: { error }\n});\n\nconst fetchAlbumsSuccess: ActionCreator<FetchAlbumsSuccessAction> = (\n  albums\n) => ({\n  type: FETCH_ALBUMS_SUCCESS,\n  payload: albums\n});\n\nexport const fetchAlbums = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchAlbumsAction());\n\n    get(`/api/albums`)\n      .then((albumResponse: AxiosResponse<Song[]>) => {\n        Promise.all(\n          albumResponse.data.map((album: BasicDetails) =>\n            get(`/api/songs/album/${album._id}`).then((songResponse) => ({\n              [album._id]: songResponse.data\n            }))\n          )\n        )\n          .then((songs) => {\n            const flatSongs = songs.reduce((acc, curr) => {\n              acc = { ...acc, ...curr };\n              return acc;\n            }, {});\n\n            const albumsData = albumResponse.data.reduce(\n              (acc: {}, { _id, name }: Song) => {\n                acc = {\n                  ...acc,\n                  [_id]: { name, songs: flatSongs[_id] }\n                };\n                return acc;\n              },\n              {}\n            );\n            dispatch(fetchAlbumsSuccess(albumsData));\n          })\n          .catch((err: Error) => {\n            dispatch(fetchAlbumsFailure(err.message));\n          });\n      })\n      .catch((err: Error) => {\n        dispatch(fetchAlbumsFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}