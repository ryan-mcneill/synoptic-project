{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_SONGS, FETCH_SONGS_FAILURE, FETCH_SONGS_SUCCESS } from \"../types\";\nimport { getBackground, setCurrentSong } from \"./\";\n\nconst fetchSongsAction = () => ({\n  type: FETCH_SONGS\n});\n\nconst fetchSongsFailure = error => ({\n  type: FETCH_SONGS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchSongsSuccess = playlist => ({\n  type: FETCH_SONGS_SUCCESS,\n  payload: playlist\n});\n\nexport const fetchSongs = ({\n  id,\n  type\n}) => {\n  return dispatch => {\n    dispatch(fetchSongsAction());\n    axios.get(`/api/songs/${type}/${id}`).then(res => {\n      dispatch(fetchSongsSuccess(res.data));\n      dispatch(setCurrentSong(res.data[0])); // @ts-ignore\n\n      dispatch(getBackground({\n        id: res.data[0].albums[0]._id\n      }));\n    }).catch(err => {\n      dispatch(fetchSongsFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/playlistActions.ts"],"names":["axios","FETCH_SONGS","FETCH_SONGS_FAILURE","FETCH_SONGS_SUCCESS","getBackground","setCurrentSong","fetchSongsAction","type","fetchSongsFailure","error","payload","fetchSongsSuccess","playlist","fetchSongs","id","dispatch","get","then","res","data","albums","_id","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,WADF,EAEEC,mBAFF,EAGEC,mBAHF,QAOO,UAPP;AAQA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,IAA9C;;AAEA,MAAMC,gBAAiD,GAAG,OAAO;AAC/DC,EAAAA,IAAI,EAAEN;AADyD,CAAP,CAA1D;;AAIA,MAAMO,iBAAyD,GAAIC,KAAD,KAAY;AAC5EF,EAAAA,IAAI,EAAEL,mBADsE;AAE5EQ,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAFmE,CAAZ,CAAlE;;AAKA,MAAME,iBAAyD,GAC7DC,QADgE,KAE5D;AACJL,EAAAA,IAAI,EAAEJ,mBADF;AAEJO,EAAAA,OAAO,EAAEE;AAFL,CAF4D,CAAlE;;AAOA,OAAO,MAAMC,UAAU,GAAG,CAAC;AACzBC,EAAAA,EADyB;AAEzBP,EAAAA;AAFyB,CAAD,KAMpB;AACJ,SAAQQ,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAACT,gBAAgB,EAAjB,CAAR;AAEAN,IAAAA,KAAK,CACFgB,GADH,CACQ,cAAaT,IAAK,IAAGO,EAAG,EADhC,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbH,MAAAA,QAAQ,CAACJ,iBAAiB,CAACO,GAAG,CAACC,IAAL,CAAlB,CAAR;AACAJ,MAAAA,QAAQ,CAACV,cAAc,CAACa,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAD,CAAf,CAAR,CAFa,CAIb;;AACAJ,MAAAA,QAAQ,CAACX,aAAa,CAAC;AAAEU,QAAAA,EAAE,EAAEI,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,MAAZ,CAAmB,CAAnB,EAAsBC;AAA5B,OAAD,CAAd,CAAR;AACD,KARH,EASGC,KATH,CASUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAACP,iBAAiB,CAACe,GAAG,CAACC,OAAL,CAAlB,CAAR;AACD,KAXH;AAYD,GAfD;AAgBD,CAvBM","sourcesContent":["import axios from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  FETCH_SONGS,\n  FETCH_SONGS_FAILURE,\n  FETCH_SONGS_SUCCESS,\n  FetchSongsAction,\n  FetchSongsFailureAction,\n  FetchSongsSuccessAction\n} from \"../types\";\nimport { getBackground, setCurrentSong } from \"./\";\n\nconst fetchSongsAction: ActionCreator<FetchSongsAction> = () => ({\n  type: FETCH_SONGS\n});\n\nconst fetchSongsFailure: ActionCreator<FetchSongsFailureAction> = (error) => ({\n  type: FETCH_SONGS_FAILURE,\n  payload: { error }\n});\n\nconst fetchSongsSuccess: ActionCreator<FetchSongsSuccessAction> = (\n  playlist\n) => ({\n  type: FETCH_SONGS_SUCCESS,\n  payload: playlist\n});\n\nexport const fetchSongs = ({\n  id,\n  type\n}: {\n  id: string;\n  type: \"album\" | \"artist\";\n}) => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchSongsAction());\n\n    axios\n      .get(`/api/songs/${type}/${id}`)\n      .then((res) => {\n        dispatch(fetchSongsSuccess(res.data));\n        dispatch(setCurrentSong(res.data[0]));\n\n        // @ts-ignore\n        dispatch(getBackground({ id: res.data[0].albums[0]._id }));\n      })\n      .catch((err) => {\n        dispatch(fetchSongsFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}