{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/SongMenu.tsx\";\nimport React, { createRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { playlistsToArray } from \"../../utils\";\nimport { addToPlaylist } from \"../../store/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nconst buttonStyles = {\n  margin: \"60px 0\",\n  textAlign: \"center\"\n};\nconst subtitleStyles = {\n  fontSize: \"24px\",\n  margin: \"30px 0\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\"\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addToPlaylist: ({\n    playlistId,\n    name,\n    songId\n  }) => dispatch(addToPlaylist({\n    playlistId,\n    name,\n    songId\n  }))\n});\n\nconst mapStateToProps = state => ({\n  playlists: state.playlists.data\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst SongMenu = ({\n  playlists,\n  addToPlaylist,\n  songName,\n  artists,\n  id,\n  onClose\n}) => {\n  const [playlistView, setPlaylistView] = useState(false);\n  const textInput = createRef();\n  const playlistInfo = playlists ? playlistsToArray(playlists) : [];\n\n  const playlistHandler = () => {\n    setPlaylistView(true);\n  };\n\n  const handleCancel = () => {\n    setPlaylistView(false);\n  };\n\n  const handleAdd = (name, playlistId) => {\n    addToPlaylist({\n      name,\n      playlistId,\n      songId: id\n    });\n    setPlaylistView(false);\n  };\n\n  const handleCreate = () => {\n    if (textInput.current && textInput.current.value !== \"\") addToPlaylist({\n      name: textInput.current.value,\n      songId: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      borderRadius: \"24px\",\n      backgroundColor: \"white\",\n      padding: \"10%\",\n      width: \"60%\",\n      minHeight: \"30%\",\n      maxHeight: \"40%\",\n      overflowY: \"scroll\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"48px\",\n      right: \"48px\"\n    },\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  })), songName, artists && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"36px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }, artists), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), !playlistView ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: buttonStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Play now\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: buttonStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Play next\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: buttonStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Add to end of queue\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: buttonStyles,\n    onClick: playlistHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Add to playlist\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: subtitleStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Add to existing playlist\"), playlistInfo.map(({\n    name,\n    id\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `playlist-add-${id}`,\n    style: buttonStyles,\n    onClick: () => handleAdd(name, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, name)), playlistInfo.map(({\n    name,\n    id\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `playlist-add-${id}`,\n    style: buttonStyles,\n    onClick: () => handleAdd(name, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, name)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: subtitleStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \"Create new playlist\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"4vh\",\n      fontSize: \"36px\",\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: textInput,\n    type: \"text\",\n    placeholder: \"New playlist name...\",\n    style: {\n      width: \"calc(100% - 7vh)\",\n      fontSize: \"36px\",\n      paddingLeft: \"2vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    style: {\n      width: \"7vh\",\n      fontSize: \"36px\"\n    },\n    value: \"Create\",\n    onClick: handleCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: { ...buttonStyles,\n      marginBottom: \"0px\"\n    },\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"Cancel\")));\n};\n\nexport default connector(SongMenu);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/SongMenu.tsx"],"names":["React","createRef","useState","connect","playlistsToArray","addToPlaylist","FontAwesomeIcon","faTimes","buttonStyles","margin","textAlign","subtitleStyles","fontSize","textTransform","mapDispatchToProps","dispatch","playlistId","name","songId","mapStateToProps","state","playlists","data","connector","SongMenu","songName","artists","id","onClose","playlistView","setPlaylistView","textInput","playlistInfo","playlistHandler","handleCancel","handleAdd","handleCreate","current","value","position","top","left","transform","borderRadius","backgroundColor","padding","width","minHeight","maxHeight","overflowY","right","map","display","height","marginBottom","paddingLeft"],"mappings":"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","sourcesContent":["import React, { createRef, CSSProperties, ReactElement, useState } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { playlistsToArray } from \"../../utils\";\nimport { State } from \"../../store/types\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { addToPlaylist } from \"../../store/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst buttonStyles: CSSProperties = {\n  margin: \"60px 0\",\n  textAlign: \"center\"\n};\n\nconst subtitleStyles: CSSProperties = {\n  fontSize: \"24px\",\n  margin: \"30px 0\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\"\n};\n\ninterface SongMenuProps {\n  songName: string;\n  artists: string;\n  id: string;\n  onClose: () => void;\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  addToPlaylist: ({\n    playlistId,\n    name,\n    songId\n  }: {\n    playlistId?: string;\n    name: string;\n    songId: string;\n  }) => dispatch(addToPlaylist({ playlistId, name, songId }))\n});\n\nconst mapStateToProps = (state: State) => ({\n  playlists: state.playlists.data\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst SongMenu: React.FC<PropsFromRedux & SongMenuProps> = ({\n  playlists,\n  addToPlaylist,\n  songName,\n  artists,\n  id,\n  onClose\n}): ReactElement => {\n  const [playlistView, setPlaylistView] = useState(false);\n  const textInput = createRef<HTMLInputElement>();\n  const playlistInfo = playlists ? playlistsToArray(playlists) : [];\n\n  const playlistHandler = () => {\n    setPlaylistView(true);\n  };\n\n  const handleCancel = () => {\n    setPlaylistView(false);\n  };\n\n  const handleAdd = (name: string, playlistId: string) => {\n    addToPlaylist({ name, playlistId, songId: id });\n    setPlaylistView(false);\n  };\n\n  const handleCreate = () => {\n    if (textInput.current && textInput.current.value !== \"\")\n      addToPlaylist({ name: textInput.current.value, songId: id });\n  };\n\n  return (\n    <div\n      style={{\n        fontSize: \"48px\",\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        borderRadius: \"24px\",\n        backgroundColor: \"white\",\n        padding: \"10%\",\n        width: \"60%\",\n        minHeight: \"30%\",\n        maxHeight: \"40%\",\n        overflowY: \"scroll\"\n      }}\n    >\n      <div\n        style={{ position: \"absolute\", top: \"48px\", right: \"48px\" }}\n        onClick={onClose}\n      >\n        <FontAwesomeIcon icon={faTimes} />\n      </div>\n      {songName}\n      {artists && <div style={{ fontSize: \"36px\" }}>{artists}</div>}\n      <hr />\n      {!playlistView ? (\n        <>\n          <div style={buttonStyles}>Play now</div>\n          <div style={buttonStyles}>Play next</div>\n          <div style={buttonStyles}>Add to end of queue</div>\n          <div style={buttonStyles} onClick={playlistHandler}>\n            Add to playlist\n          </div>\n        </>\n      ) : (\n        <>\n          <div style={subtitleStyles}>Add to existing playlist</div>\n          {playlistInfo.map(({ name, id }) => (\n            <div\n              key={`playlist-add-${id}`}\n              style={buttonStyles}\n              onClick={() => handleAdd(name, id)}\n            >\n              {name}\n            </div>\n          ))}\n          {playlistInfo.map(({ name, id }) => (\n            <div\n              key={`playlist-add-${id}`}\n              style={buttonStyles}\n              onClick={() => handleAdd(name, id)}\n            >\n              {name}\n            </div>\n          ))}\n          <hr />\n          <div style={subtitleStyles}>Create new playlist</div>\n          <div\n            style={{\n              display: \"flex\",\n              height: \"4vh\",\n              fontSize: \"36px\",\n              marginBottom: \"20px\"\n            }}\n          >\n            <input\n              ref={textInput}\n              type=\"text\"\n              placeholder=\"New playlist name...\"\n              style={{\n                width: \"calc(100% - 7vh)\",\n                fontSize: \"36px\",\n                paddingLeft: \"2vw\"\n              }}\n            />\n            <input\n              type=\"button\"\n              style={{\n                width: \"7vh\",\n                fontSize: \"36px\"\n              }}\n              value=\"Create\"\n              onClick={handleCreate}\n            />\n          </div>\n          <div\n            style={{ ...buttonStyles, marginBottom: \"0px\" }}\n            onClick={handleCancel}\n          >\n            Cancel\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default connector(SongMenu);\n"]},"metadata":{},"sourceType":"module"}