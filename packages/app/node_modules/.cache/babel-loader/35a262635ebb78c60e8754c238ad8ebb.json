{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Albums.tsx\";\nimport React from \"react\";\nimport { InfoTile } from \"./\";\nimport { connect } from \"react-redux\";\nimport { fetchPlaylist, setSelectedTab } from \"../../store/actions\";\nconst tabButtonStyles = {\n  height: \"8px\",\n  backgroundColor: \"black\",\n  position: \"relative\",\n  left: \"-50%\",\n  marginTop: \"8px\",\n  transition: \"all 0.5s ease\"\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSongs: (id, type) => dispatch(fetchPlaylist({\n    id,\n    type\n  })),\n  setSelectedTab: tab => dispatch(setSelectedTab(tab))\n});\n\nconst mapStateToProps = state => ({\n  albums: state.albums.data,\n  selectedTab: state.menu.selectedTab\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst Albums = ({\n  albums,\n  fetchSongs,\n  selectedTab,\n  setSelectedTab\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, selectedTab === \"ALBUMS\" && albums && albums.length > 0 ? albums.map(album => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${album._id}`,\n    title: album.name,\n    onClick: () => {\n      fetchSongs(album._id, \"album\");\n      setSelectedTab(\"PLAYLIST\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  })) : selectedTab === \"ALBUMS\" && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Sorry no albums have been loaded.\"));\n};\n\nexport default connector(Albums);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Albums.tsx"],"names":["React","InfoTile","connect","fetchPlaylist","setSelectedTab","tabButtonStyles","height","backgroundColor","position","left","marginTop","transition","mapDispatchToProps","dispatch","fetchSongs","id","type","tab","mapStateToProps","state","albums","data","selectedTab","menu","connector","Albums","length","map","album","_id","name","fontSize","textAlign"],"mappings":";AAAA,OAAOA,KAAP,MAAuD,OAAvD;AAOA,SAASC,QAAT,QAAmC,IAAnC;AAEA,SAASC,OAAT,QAAwC,aAAxC;AAIA,SAEEC,aAFF,EAIEC,cAJF,QAKO,qBALP;AAOA,MAAMC,eAA8B,GAAG;AACrCC,EAAAA,MAAM,EAAE,KAD6B;AAErCC,EAAAA,eAAe,EAAE,OAFoB;AAGrCC,EAAAA,QAAQ,EAAE,UAH2B;AAIrCC,EAAAA,IAAI,EAAE,MAJ+B;AAKrCC,EAAAA,SAAS,EAAE,KAL0B;AAMrCC,EAAAA,UAAU,EAAE;AANyB,CAAvC;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmD;AAC5EC,EAAAA,UAAU,EAAE,CAACC,EAAD,EAAaC,IAAb,KACVH,QAAQ,CAACV,aAAa,CAAC;AAAEY,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,CAAd,CAFkE;AAG5EZ,EAAAA,cAAc,EAAGa,GAAD,IAAeJ,QAAQ,CAACT,cAAc,CAACa,GAAD,CAAf;AAHqC,CAAnD,CAA3B;;AAMA,MAAMC,eAAe,GAAIC,KAAD,KAAmB;AACzCC,EAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,CAAaC,IADoB;AAEzCC,EAAAA,WAAW,EAAEH,KAAK,CAACI,IAAN,CAAWD;AAFiB,CAAnB,CAAxB;;AAKA,MAAME,SAAS,GAAGtB,OAAO,CAACgB,eAAD,EAAkBN,kBAAlB,CAAzB;;AAIA,MAAMa,MAA0B,GAAG,CAAC;AAClCL,EAAAA,MADkC;AAElCN,EAAAA,UAFkC;AAGlCQ,EAAAA,WAHkC;AAIlClB,EAAAA;AAJkC,CAAD,KAKf;AAClB,sBACE,0CACGkB,WAAW,KAAK,QAAhB,IAA4BF,MAA5B,IAAsCA,MAAM,CAACM,MAAP,GAAgB,CAAtD,GACGN,MAAM,CAACO,GAAP,CAAYC,KAAD,iBACT,oBAAC,QAAD;AACE,IAAA,GAAG,EAAG,aAAYA,KAAK,CAACC,GAAI,EAD9B;AAEE,IAAA,KAAK,EAAED,KAAK,CAACE,IAFf;AAGE,IAAA,OAAO,EAAE,MAAM;AACbhB,MAAAA,UAAU,CAACc,KAAK,CAACC,GAAP,EAAY,OAAZ,CAAV;AACAzB,MAAAA,cAAc,CAAC,UAAD,CAAd;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADH,GAWGkB,WAAW,KAAK,QAAhB,iBACE;AAAK,IAAA,KAAK,EAAE;AAAES,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAbR,CADF;AAoBD,CA1BD;;AA4BA,eAAeR,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["import React, { CSSProperties, FC, ReactElement } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBars,\n  faRecordVinyl,\n  faUsers\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { InfoTile, Playlist } from \"./\";\nimport { State, Tabs } from \"../../store/types\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { artistsToString } from \"../../utils\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport {\n  changeSong,\n  fetchPlaylist,\n  setIsOpen,\n  setSelectedTab\n} from \"../../store/actions\";\n\nconst tabButtonStyles: CSSProperties = {\n  height: \"8px\",\n  backgroundColor: \"black\",\n  position: \"relative\",\n  left: \"-50%\",\n  marginTop: \"8px\",\n  transition: \"all 0.5s ease\"\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  fetchSongs: (id: string, type: \"album\" | \"artist\") =>\n    dispatch(fetchPlaylist({ id, type })),\n  setSelectedTab: (tab: Tabs) => dispatch(setSelectedTab(tab))\n});\n\nconst mapStateToProps = (state: State) => ({\n  albums: state.albums.data,\n  selectedTab: state.menu.selectedTab\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst Albums: FC<PropsFromRedux> = ({\n  albums,\n  fetchSongs,\n  selectedTab,\n  setSelectedTab\n}): ReactElement => {\n  return (\n    <>\n      {selectedTab === \"ALBUMS\" && albums && albums.length > 0\n        ? albums.map((album) => (\n            <InfoTile\n              key={`info-tile-${album._id}`}\n              title={album.name}\n              onClick={() => {\n                fetchSongs(album._id, \"album\");\n                setSelectedTab(\"PLAYLIST\");\n              }}\n            />\n          ))\n        : selectedTab === \"ALBUMS\" && (\n            <div style={{ fontSize: \"48px\", textAlign: \"center\" }}>\n              Sorry no albums have been loaded.\n            </div>\n          )}\n    </>\n  );\n};\n\nexport default connector(Albums);\n"]},"metadata":{},"sourceType":"module"}