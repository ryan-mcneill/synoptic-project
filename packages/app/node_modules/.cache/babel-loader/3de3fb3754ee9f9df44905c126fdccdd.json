{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/SongList.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { InfoTile } from \"./\";\nimport { setSelectedTab, updatePlaylist } from \"../../store/actions\";\n\nconst mapDispatchToProps = dispatch => ({\n  updatePlaylist: ({\n    previous,\n    current,\n    next\n  }) => dispatch(updatePlaylist({\n    previous,\n    current,\n    next\n  })),\n  setSelectedTab: tab => dispatch(setSelectedTab(tab))\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\nconst SongList = ({\n  updatePlaylist,\n  setSelectedTab,\n  data,\n  isVisible\n}) => {\n  const handleClick = () => {\n    if (data) {\n      const current = data[0];\n      const next = data.slice(1, data.length);\n      updatePlaylist({\n        previous: [],\n        current,\n        next\n      });\n      setSelectedTab(\"PLAYLIST\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, isVisible && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      marginBottom: \"80px\"\n    },\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlay,\n    style: {\n      marginLeft: \"8px\",\n      marginRight: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), \"Play all\"), data.map(song => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${song._id}`,\n    title: song.name,\n    onClick: () => console.log(song._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default connector(SongList);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/SongList.tsx"],"names":["React","connect","FontAwesomeIcon","faPlay","InfoTile","setSelectedTab","updatePlaylist","mapDispatchToProps","dispatch","previous","current","next","tab","connector","SongList","data","isVisible","handleClick","slice","length","display","fontSize","marginBottom","marginLeft","marginRight","map","song","_id","name","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAwC,OAAxC;AAEA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,QAAT,QAAyB,IAAzB;AAEA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,qBAA/C;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmD;AAC5EF,EAAAA,cAAc,EAAE,CAAC;AAAEG,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAAD,KACdH,QAAQ,CAACF,cAAc,CAAC;AAAEG,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAAD,CAAf,CAFkE;AAG5EN,EAAAA,cAAc,EAAGO,GAAD,IAAeJ,QAAQ,CAACH,cAAc,CAACO,GAAD,CAAf;AAHqC,CAAnD,CAA3B;;AAMA,MAAMC,SAAS,GAAGZ,OAAO,CAAC,IAAD,EAAOM,kBAAP,CAAzB;;AAIA,MAAMO,QAA6C,GAAG,CAAC;AACrDR,EAAAA,cADqD;AAErDD,EAAAA,cAFqD;AAGrDU,EAAAA,IAHqD;AAIrDC,EAAAA;AAJqD,CAAD,KAKlC;AAClB,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAIF,IAAJ,EAAU;AACR,YAAML,OAAO,GAAGK,IAAI,CAAC,CAAD,CAApB;AACA,YAAMJ,IAAI,GAAGI,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcH,IAAI,CAACI,MAAnB,CAAb;AAEAb,MAAAA,cAAc,CAAC;AAAEG,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA;AAAzB,OAAD,CAAd;AACAN,MAAAA,cAAc,CAAC,UAAD,CAAd;AACD;AACF,GARD;;AAUA,sBACE,0CACGW,SAAS,iBACR;AAAK,IAAA,KAAK,EAAE;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,YAAY,EAAE;AAAlC,KAAZ;AAAwD,IAAA,OAAO,EAAEL,WAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAEd,MADR;AAEE,IAAA,KAAK,EAAE;AAAEoB,MAAAA,UAAU,EAAE,KAAd;AAAqBC,MAAAA,WAAW,EAAE;AAAlC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,aADF,EAQGT,IAAI,CAACU,GAAL,CAAUC,IAAD,iBACR,oBAAC,QAAD;AACE,IAAA,GAAG,EAAG,aAAYA,IAAI,CAACC,GAAI,EAD7B;AAEE,IAAA,KAAK,EAAED,IAAI,CAACE,IAFd;AAGE,IAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACC,GAAjB,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CARH,CAFJ,CADF;AAsBD,CAtCD;;AAwCA,eAAed,SAAS,CAACC,QAAD,CAAxB","sourcesContent":["import React, { FC, ReactElement } from \"react\";\nimport { Action } from \"redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { InfoTile } from \"./\";\nimport { PlaylistState, Song, State, Tabs } from \"../../store/types\";\nimport { setSelectedTab, updatePlaylist } from \"../../store/actions\";\n\ninterface AccordionProps {\n  isVisible: boolean;\n  data: Song[];\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  updatePlaylist: ({ previous, current, next }: PlaylistState) =>\n    dispatch(updatePlaylist({ previous, current, next })),\n  setSelectedTab: (tab: Tabs) => dispatch(setSelectedTab(tab))\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst SongList: FC<PropsFromRedux & AccordionProps> = ({\n  updatePlaylist,\n  setSelectedTab,\n  data,\n  isVisible\n}): ReactElement => {\n  const handleClick = () => {\n    if (data) {\n      const current = data[0];\n      const next = data.slice(1, data.length);\n\n      updatePlaylist({ previous: [], current, next });\n      setSelectedTab(\"PLAYLIST\");\n    }\n  };\n\n  return (\n    <>\n      {isVisible && (\n        <div style={{ display: \"block\" }}>\n          <div style={{ fontSize: \"48px\", marginBottom: \"80px\" }} onClick={handleClick}>\n            <FontAwesomeIcon\n              icon={faPlay}\n              style={{ marginLeft: \"8px\", marginRight: \"40px\" }}\n            />\n            Play all\n          </div>\n          {data.map((song) => (\n            <InfoTile\n              key={`info-tile-${song._id}`}\n              title={song.name}\n              onClick={() => console.log(song._id)}\n            />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default connector(SongList);\n"]},"metadata":{},"sourceType":"module"}