{"ast":null,"code":"import get from \"axios\";\nimport { FETCH_SONGS, FETCH_SONGS_FAILURE, FETCH_SONGS_SUCCESS, PLAYLIST_ADD, PLAYLIST_REMOVE, SET_PLAYLIST } from \"../types\";\nimport { getBackground, setCurrentSong } from \"./\";\nexport const setPlaylist = songs => {\n  const firstSong = songs[0];\n  const nextSongs = songs.splice(1, songs.length);\n  return {\n    type: SET_PLAYLIST,\n    payload: {\n      firstSong,\n      nextSongs\n    }\n  };\n};\nexport const playlistAdd = song => ({\n  type: PLAYLIST_ADD,\n  payload: song\n});\nexport const playlistRemove = song => ({\n  type: PLAYLIST_REMOVE,\n  payload: song\n});\n\nconst fetchSongsAction = () => ({\n  type: FETCH_SONGS\n});\n\nconst fetchSongsFailure = error => ({\n  type: FETCH_SONGS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchSongsSuccess = playlist => ({\n  type: FETCH_SONGS_SUCCESS,\n  payload: playlist\n});\n\nexport const fetchSongs = ({\n  id,\n  type\n}) => {\n  return dispatch => {\n    dispatch(fetchSongsAction());\n    get(`/api/songs/${type}/${id}`).then(res => {\n      dispatch(fetchSongsSuccess(res.data));\n      dispatch(setCurrentSong(res.data[0])); // @ts-ignore\n\n      dispatch(getBackground({\n        id: res.data[0].albums[0]._id\n      }));\n    }).catch(err => {\n      dispatch(fetchSongsFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/playlistActions.ts"],"names":["get","FETCH_SONGS","FETCH_SONGS_FAILURE","FETCH_SONGS_SUCCESS","PLAYLIST_ADD","PLAYLIST_REMOVE","SET_PLAYLIST","getBackground","setCurrentSong","setPlaylist","songs","firstSong","nextSongs","splice","length","type","payload","playlistAdd","song","playlistRemove","fetchSongsAction","fetchSongsFailure","error","fetchSongsSuccess","playlist","fetchSongs","id","dispatch","then","res","data","albums","_id","catch","err","message"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AAEA,SACEC,WADF,EAEEC,mBAFF,EAGEC,mBAHF,EAOEC,YAPF,EAQEC,eARF,EAWEC,YAXF,QAaO,UAbP;AAcA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,IAA9C;AAEA,OAAO,MAAMC,WAA6C,GAAIC,KAAD,IAAW;AACtE,QAAMC,SAAS,GAAGD,KAAK,CAAC,CAAD,CAAvB;AACA,QAAME,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgBH,KAAK,CAACI,MAAtB,CAAlB;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAET,YADD;AAELU,IAAAA,OAAO,EAAE;AAAEL,MAAAA,SAAF;AAAaC,MAAAA;AAAb;AAFJ,GAAP;AAID,CARM;AAUP,OAAO,MAAMK,WAA6C,GAAIC,IAAD,KAAW;AACtEH,EAAAA,IAAI,EAAEX,YADgE;AAEtEY,EAAAA,OAAO,EAAEE;AAF6D,CAAX,CAAtD;AAKP,OAAO,MAAMC,cAAmD,GAC9DD,IADiE,KAE7D;AACJH,EAAAA,IAAI,EAAEV,eADF;AAEJW,EAAAA,OAAO,EAAEE;AAFL,CAF6D,CAA5D;;AAOP,MAAME,gBAAiD,GAAG,OAAO;AAC/DL,EAAAA,IAAI,EAAEd;AADyD,CAAP,CAA1D;;AAIA,MAAMoB,iBAAyD,GAAIC,KAAD,KAAY;AAC5EP,EAAAA,IAAI,EAAEb,mBADsE;AAE5Ec,EAAAA,OAAO,EAAE;AAAEM,IAAAA;AAAF;AAFmE,CAAZ,CAAlE;;AAKA,MAAMC,iBAAyD,GAC7DC,QADgE,KAE5D;AACJT,EAAAA,IAAI,EAAEZ,mBADF;AAEJa,EAAAA,OAAO,EAAEQ;AAFL,CAF4D,CAAlE;;AAOA,OAAO,MAAMC,UAAU,GAAG,CAAC;AACzBC,EAAAA,EADyB;AAEzBX,EAAAA;AAFyB,CAAD,KAMpB;AACJ,SAAQY,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AAEApB,IAAAA,GAAG,CAAE,cAAae,IAAK,IAAGW,EAAG,EAA1B,CAAH,CACGE,IADH,CACSC,GAAD,IAAS;AACbF,MAAAA,QAAQ,CAACJ,iBAAiB,CAACM,GAAG,CAACC,IAAL,CAAlB,CAAR;AACAH,MAAAA,QAAQ,CAACnB,cAAc,CAACqB,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAD,CAAf,CAAR,CAFa,CAIb;;AACAH,MAAAA,QAAQ,CAACpB,aAAa,CAAC;AAAEmB,QAAAA,EAAE,EAAEG,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,MAAZ,CAAmB,CAAnB,EAAsBC;AAA5B,OAAD,CAAd,CAAR;AACD,KAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdP,MAAAA,QAAQ,CAACN,iBAAiB,CAACa,GAAG,CAACC,OAAL,CAAlB,CAAR;AACD,KAVH;AAWD,GAdD;AAeD,CAtBM","sourcesContent":["import get from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  FETCH_SONGS,\n  FETCH_SONGS_FAILURE,\n  FETCH_SONGS_SUCCESS,\n  FetchSongsAction,\n  FetchSongsFailureAction,\n  FetchSongsSuccessAction,\n  PLAYLIST_ADD,\n  PLAYLIST_REMOVE,\n  PlaylistAddAction,\n  PlaylistRemoveAction,\n  SET_PLAYLIST,\n  SetPlaylistAction\n} from \"../types\";\nimport { getBackground, setCurrentSong } from \"./\";\n\nexport const setPlaylist: ActionCreator<SetPlaylistAction> = (songs) => {\n  const firstSong = songs[0];\n  const nextSongs = songs.splice(1, songs.length);\n\n  return {\n    type: SET_PLAYLIST,\n    payload: { firstSong, nextSongs }\n  };\n};\n\nexport const playlistAdd: ActionCreator<PlaylistAddAction> = (song) => ({\n  type: PLAYLIST_ADD,\n  payload: song\n});\n\nexport const playlistRemove: ActionCreator<PlaylistRemoveAction> = (\n  song\n) => ({\n  type: PLAYLIST_REMOVE,\n  payload: song\n});\n\nconst fetchSongsAction: ActionCreator<FetchSongsAction> = () => ({\n  type: FETCH_SONGS\n});\n\nconst fetchSongsFailure: ActionCreator<FetchSongsFailureAction> = (error) => ({\n  type: FETCH_SONGS_FAILURE,\n  payload: { error }\n});\n\nconst fetchSongsSuccess: ActionCreator<FetchSongsSuccessAction> = (\n  playlist\n) => ({\n  type: FETCH_SONGS_SUCCESS,\n  payload: playlist\n});\n\nexport const fetchSongs = ({\n  id,\n  type\n}: {\n  id: string;\n  type: \"album\" | \"artist\";\n}) => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchSongsAction());\n\n    get(`/api/songs/${type}/${id}`)\n      .then((res) => {\n        dispatch(fetchSongsSuccess(res.data));\n        dispatch(setCurrentSong(res.data[0]));\n\n        // @ts-ignore\n        dispatch(getBackground({ id: res.data[0].albums[0]._id }));\n      })\n      .catch((err) => {\n        dispatch(fetchSongsFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}