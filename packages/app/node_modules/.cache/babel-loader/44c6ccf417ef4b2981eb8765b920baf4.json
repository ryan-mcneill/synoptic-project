{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_SONG, FETCH_SONG_FAILURE, FETCH_SONG_SUCCESS } from \"../types\";\n\nconst fetchSongAction = () => ({\n  type: FETCH_SONG\n});\n\nconst fetchSongFailure = error => ({\n  type: FETCH_SONG_FAILURE,\n  payload: error\n});\n\nconst fetchSongSuccess = data => ({\n  type: FETCH_SONG_SUCCESS,\n  payload: data\n});\n\nexport const fetchSong = id => {\n  return dispatch => {\n    dispatch(fetchSongAction());\n    axios.get(\"/api/song/\" + id).then(res => {\n      dispatch(fetchSongSuccess(res.data));\n    }).catch(err => {\n      dispatch(fetchSongFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/currentSongActions.ts"],"names":["axios","FETCH_SONG","FETCH_SONG_FAILURE","FETCH_SONG_SUCCESS","fetchSongAction","type","fetchSongFailure","error","payload","fetchSongSuccess","data","fetchSong","id","dispatch","get","then","res","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,UADF,EAEEC,kBAFF,EAGEC,kBAHF,QAQO,UARP;;AAUA,MAAMC,eAA+C,GAAG,OAAO;AAC7DC,EAAAA,IAAI,EAAEJ;AADuD,CAAP,CAAxD;;AAIA,MAAMK,gBAAuD,GAAIC,KAAD,KAAY;AAC1EF,EAAAA,IAAI,EAAEH,kBADoE;AAE1EM,EAAAA,OAAO,EAAED;AAFiE,CAAZ,CAAhE;;AAKA,MAAME,gBAAuD,GAAIC,IAAD,KAAW;AACzEL,EAAAA,IAAI,EAAEF,kBADmE;AAEzEK,EAAAA,OAAO,EAAEE;AAFgE,CAAX,CAAhE;;AAKA,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAgB;AACvC,SAAQC,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAACT,eAAe,EAAhB,CAAR;AAEAJ,IAAAA,KAAK,CACFc,GADH,CACO,eAAeF,EADtB,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbH,MAAAA,QAAQ,CAACJ,gBAAgB,CAACO,GAAG,CAACN,IAAL,CAAjB,CAAR;AACD,KAJH,EAKGO,KALH,CAKUC,GAAD,IAAS;AACdL,MAAAA,QAAQ,CAACP,gBAAgB,CAACY,GAAG,CAACC,OAAL,CAAjB,CAAR;AACD,KAPH;AAQD,GAXD;AAYD,CAbM","sourcesContent":["import axios from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  FETCH_SONG,\n  FETCH_SONG_FAILURE,\n  FETCH_SONG_SUCCESS,\n  FetchSongAction,\n  FetchSongFailureAction,\n  FetchSongSuccessAction,\n  State\n} from \"../types\";\n\nconst fetchSongAction: ActionCreator<FetchSongAction> = () => ({\n  type: FETCH_SONG\n});\n\nconst fetchSongFailure: ActionCreator<FetchSongFailureAction> = (error) => ({\n  type: FETCH_SONG_FAILURE,\n  payload: error\n});\n\nconst fetchSongSuccess: ActionCreator<FetchSongSuccessAction> = (data) => ({\n  type: FETCH_SONG_SUCCESS,\n  payload: data\n});\n\nexport const fetchSong = (id: string) => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchSongAction());\n\n    axios\n      .get(\"/api/song/\" + id)\n      .then((res) => {\n        dispatch(fetchSongSuccess(res.data));\n      })\n      .catch((err) => {\n        dispatch(fetchSongFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}