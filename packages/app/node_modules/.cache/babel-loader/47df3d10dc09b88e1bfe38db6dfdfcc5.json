{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/App.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n// @ts-ignore\nimport Loader from \"react-loader-spinner\";\nimport { Menu, MusicPlayer } from \"./views\";\nimport { fetchAlbums, fetchArtists } from \"./store/actions\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst mapStateToProps = state => {\n  var _state$currentSong$ba;\n\n  return {\n    backgroundColor: (_state$currentSong$ba = state.currentSong.background) === null || _state$currentSong$ba === void 0 ? void 0 : _state$currentSong$ba.colour\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchAlbums: () => dispatch(fetchAlbums()),\n  fetchArtists: () => dispatch(fetchArtists())\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst App = ({\n  backgroundColor = \"#cdcdcd\",\n  fetchAlbums,\n  fetchArtists\n}) => {\n  const isLoading = true;\n  fetchAlbums();\n  fetchArtists();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      transform: \"translate(-50%, -50%)\",\n      top: \"50%\",\n      left: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    type: \"Bars\",\n    color: \"#ffb3ba\",\n    height: 128,\n    width: 256,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  })), !isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor,\n      width: \"100vw\",\n      height: \"100vh\",\n      fontFamily: \"'Work Sans', sans-serif\",\n      overflow: \"hidden\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MusicPlayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default connector(App);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/App.tsx"],"names":["React","connect","Loader","Menu","MusicPlayer","fetchAlbums","fetchArtists","mapStateToProps","state","backgroundColor","currentSong","background","colour","mapDispatchToProps","dispatch","connector","App","isLoading","position","transform","top","left","width","height","fontFamily","overflow"],"mappings":";AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAGA;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,SAAlC;AAEA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,iBAA1C;AAEA,OAAO,+DAAP;;AAEA,MAAMC,eAAe,GAAIC,KAAD;AAAA;;AAAA,SAAmB;AACzCC,IAAAA,eAAe,2BAAED,KAAK,CAACE,WAAN,CAAkBC,UAApB,0DAAE,sBAA8BC;AADN,GAAnB;AAAA,CAAxB;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmD;AAC5ET,EAAAA,WAAW,EAAE,MAAMS,QAAQ,CAACT,WAAW,EAAZ,CADiD;AAE5EC,EAAAA,YAAY,EAAE,MAAMQ,QAAQ,CAACR,YAAY,EAAb;AAFgD,CAAnD,CAA3B;;AAKA,MAAMS,SAAS,GAAGd,OAAO,CAACM,eAAD,EAAkBM,kBAAlB,CAAzB;;AAIA,MAAMG,GAA6B,GAAG,CAAC;AACrCP,EAAAA,eAAe,GAAG,SADmB;AAErCJ,EAAAA,WAFqC;AAGrCC,EAAAA;AAHqC,CAAD,KAIlB;AAClB,QAAMW,SAAS,GAAG,IAAlB;AACAZ,EAAAA,WAAW;AACXC,EAAAA,YAAY;AAEZ,sBACE,0CACGW,SAAS,iBACR;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,SAAS,EAAE,uBAFN;AAGLC,MAAAA,GAAG,EAAE,KAHA;AAILC,MAAAA,IAAI,EAAE;AAJD,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,KAAK,EAAC,SAA1B;AAAoC,IAAA,MAAM,EAAE,GAA5C;AAAiD,IAAA,KAAK,EAAE,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAFJ,EAaG,CAACJ,SAAD,iBACC;AACE,IAAA,KAAK,EAAE;AACLR,MAAAA,eADK;AAELa,MAAAA,KAAK,EAAE,OAFF;AAGLC,MAAAA,MAAM,EAAE,OAHH;AAILC,MAAAA,UAAU,EAAE,yBAJP;AAKLC,MAAAA,QAAQ,EAAE;AALL,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAUE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CAdJ,CADF;AA8BD,CAvCD;;AAyCA,eAAeV,SAAS,CAACC,GAAD,CAAxB","sourcesContent":["import React, { ReactElement } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\n// @ts-ignore\nimport Loader from \"react-loader-spinner\";\nimport { Menu, MusicPlayer } from \"./views\";\nimport { State } from \"./store/types\";\nimport { fetchAlbums, fetchArtists } from \"./store/actions\";\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst mapStateToProps = (state: State) => ({\n  backgroundColor: state.currentSong.background?.colour\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  fetchAlbums: () => dispatch(fetchAlbums()),\n  fetchArtists: () => dispatch(fetchArtists())\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst App: React.FC<PropsFromRedux> = ({\n  backgroundColor = \"#cdcdcd\",\n  fetchAlbums,\n  fetchArtists\n}): ReactElement => {\n  const isLoading = true;\n  fetchAlbums();\n  fetchArtists();\n\n  return (\n    <>\n      {isLoading && (\n        <div\n          style={{\n            position: \"absolute\",\n            transform: \"translate(-50%, -50%)\",\n            top: \"50%\",\n            left: \"50%\"\n          }}\n        >\n          <Loader type=\"Bars\" color=\"#ffb3ba\" height={128} width={256} />\n        </div>\n      )}\n      {!isLoading && (\n        <div\n          style={{\n            backgroundColor,\n            width: \"100vw\",\n            height: \"100vh\",\n            fontFamily: \"'Work Sans', sans-serif\",\n            overflow: \"hidden\"\n          }}\n        >\n          <MusicPlayer />\n          <Menu />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default connector(App);\n"]},"metadata":{},"sourceType":"module"}