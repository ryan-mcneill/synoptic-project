{"ast":null,"code":"import FastAverageColor from \"fast-average-color\";\nimport { SET_BACKGROUND, TOGGLE_PLAYING } from \"../types\";\nimport { updatePlaylist } from \"./playlistActions\";\nexport const setBackground = data => ({\n  type: SET_BACKGROUND,\n  data\n});\nexport const togglePlaying = isPlaying => ({\n  type: TOGGLE_PLAYING,\n  isPlaying\n});\nexport const nextSong = () => {\n  return (dispatch, getState) => {\n    const {\n      playlist\n    } = getState();\n\n    if (playlist && playlist.current && playlist.next.length > 0) {\n      const previous = playlist.previous ? playlist.previous.concat(playlist.current) : [playlist.current];\n      const current = playlist.next[0];\n      const next = playlist.next.length > 1 ? playlist.next.slice(1, playlist.next.length) : [];\n      dispatch(updatePlaylist({\n        previous,\n        current,\n        next\n      }));\n      dispatch(getBackground({\n        id: current.albums[0]._id\n      }));\n    }\n  };\n};\nexport const getBackground = ({\n  id\n}) => {\n  return dispatch => {\n    const fac = new FastAverageColor();\n    fac.getColorAsync(`/api/album/art/${id}`).then(color => {\n      const {\n        isLight,\n        isDark,\n        hex: colour\n      } = color;\n      dispatch(setBackground({\n        isLight,\n        isDark,\n        colour\n      }));\n    }).catch(error => {\n      console.error(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/currentSongActions.ts"],"names":["FastAverageColor","SET_BACKGROUND","TOGGLE_PLAYING","updatePlaylist","setBackground","data","type","togglePlaying","isPlaying","nextSong","dispatch","getState","playlist","current","next","length","previous","concat","slice","getBackground","id","albums","_id","fac","getColorAsync","then","color","isLight","isDark","hex","colour","catch","error","console","message"],"mappings":"AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,SAGEC,cAHF,EAKEC,cALF,QAMO,UANP;AAQA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAO,MAAMC,aAAa,GAAIC,IAAD,KAA2C;AACtEC,EAAAA,IAAI,EAAEL,cADgE;AAEtEI,EAAAA;AAFsE,CAA3C,CAAtB;AAKP,OAAO,MAAME,aAAa,GAAIC,SAAD,KAA8C;AACzEF,EAAAA,IAAI,EAAEJ,cADmE;AAEzEM,EAAAA;AAFyE,CAA9C,CAAtB;AAKP,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,SAAO,CACLC,QADK,EAELC,QAFK,KAGF;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAeD,QAAQ,EAA7B;;AAEA,QAAIC,QAAQ,IAAIA,QAAQ,CAACC,OAArB,IAAgCD,QAAQ,CAACE,IAAT,CAAcC,MAAd,GAAuB,CAA3D,EAA8D;AAC5D,YAAMC,QAAQ,GAAGJ,QAAQ,CAACI,QAAT,GACbJ,QAAQ,CAACI,QAAT,CAAkBC,MAAlB,CAAyBL,QAAQ,CAACC,OAAlC,CADa,GAEb,CAACD,QAAQ,CAACC,OAAV,CAFJ;AAGA,YAAMA,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAhB;AACA,YAAMA,IAAI,GACRF,QAAQ,CAACE,IAAT,CAAcC,MAAd,GAAuB,CAAvB,GACIH,QAAQ,CAACE,IAAT,CAAcI,KAAd,CAAoB,CAApB,EAAuBN,QAAQ,CAACE,IAAT,CAAcC,MAArC,CADJ,GAEI,EAHN;AAKAL,MAAAA,QAAQ,CAACP,cAAc,CAAC;AAAEa,QAAAA,QAAF;AAAYH,QAAAA,OAAZ;AAAqBC,QAAAA;AAArB,OAAD,CAAf,CAAR;AACAJ,MAAAA,QAAQ,CAACS,aAAa,CAAC;AAAEC,QAAAA,EAAE,EAAEP,OAAO,CAACQ,MAAR,CAAe,CAAf,EAAkBC;AAAxB,OAAD,CAAd,CAAR;AACD;AACF,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMH,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4B;AACvD,SAAQV,QAAD,IAAwB;AAC7B,UAAMa,GAAG,GAAG,IAAIvB,gBAAJ,EAAZ;AAEAuB,IAAAA,GAAG,CACAC,aADH,CACkB,kBAAiBJ,EAAG,EADtC,EAEGK,IAFH,CAESC,KAAD,IAAoC;AACxC,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA,GAAG,EAAEC;AAAxB,UAAmCJ,KAAzC;AACAhB,MAAAA,QAAQ,CAACN,aAAa,CAAC;AAAEuB,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBE,QAAAA;AAAnB,OAAD,CAAd,CAAR;AACD,KALH,EAMGC,KANH,CAMUC,KAAD,IAAkB;AACvBC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD,KARH;AASD,GAZD;AAaD,CAdM","sourcesContent":["import { Action, Dispatch } from \"redux\";\nimport FastAverageColor from \"fast-average-color\";\nimport {\n  Background,\n  CurrentSongActions,\n  SET_BACKGROUND,\n  State,\n  TOGGLE_PLAYING\n} from \"../types\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { updatePlaylist } from \"./playlistActions\";\n\nexport const setBackground = (data: Background): CurrentSongActions => ({\n  type: SET_BACKGROUND,\n  data\n});\n\nexport const togglePlaying = (isPlaying?: boolean): CurrentSongActions => ({\n  type: TOGGLE_PLAYING,\n  isPlaying\n});\n\nexport const nextSong = () => {\n  return (\n    dispatch: ThunkDispatch<State, void, Action>,\n    getState: () => State\n  ) => {\n    const { playlist } = getState();\n\n    if (playlist && playlist.current && playlist.next.length > 0) {\n      const previous = playlist.previous\n        ? playlist.previous.concat(playlist.current)\n        : [playlist.current];\n      const current = playlist.next[0];\n      const next =\n        playlist.next.length > 1\n          ? playlist.next.slice(1, playlist.next.length)\n          : [];\n\n      dispatch(updatePlaylist({ previous, current, next }));\n      dispatch(getBackground({ id: current.albums[0]._id }));\n    }\n  };\n};\n\nexport const getBackground = ({ id }: { id: string }) => {\n  return (dispatch: Dispatch) => {\n    const fac = new FastAverageColor();\n\n    fac\n      .getColorAsync(`/api/album/art/${id}`)\n      .then((color: IFastAverageColorResult) => {\n        const { isLight, isDark, hex: colour } = color;\n        dispatch(setBackground({ isLight, isDark, colour }));\n      })\n      .catch((error: Error) => {\n        console.error(error.message);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}