{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/MusicPlayer/NowPlaying.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { artistsToString } from \"../../utils\";\n\nconst mapStateToProps = state => {\n  var _state$currentSong$da, _state$currentSong$da2;\n\n  return {\n    artists: (_state$currentSong$da = state.currentSong.data) === null || _state$currentSong$da === void 0 ? void 0 : _state$currentSong$da.artists,\n    songName: (_state$currentSong$da2 = state.currentSong.data) === null || _state$currentSong$da2 === void 0 ? void 0 : _state$currentSong$da2.name,\n    data: state.currentSong.data\n  };\n};\n\nconst connector = connect(mapStateToProps);\n\nconst NowPlaying = ({\n  artists = [{\n    name: \"Unknown Artist\"\n  }],\n  data,\n  songName = \"Unknown\"\n}) => {\n  let artistNames = [\"Unknown Artist\"];\n\n  if (artists.length > 0) {\n    // @ts-ignore error with typescript being unable to recognise union types correctly\n    artistNames = artists.reduce((acc, {\n      name\n    }) => {\n      acc.push(name);\n      return acc;\n    }, []);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"5%\",\n      width: \"90%\",\n      textAlign: \"center\",\n      padding: \"5% 5% 2% 5%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"24px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, data ? \"NOW PLAYING\" : \"NOTHING PLAYING\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, data ? `${songName} - ${artistsToString(artistNames)}` : \"Please make a song selection\"));\n};\n\nexport default connector(NowPlaying);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/MusicPlayer/NowPlaying.tsx"],"names":["React","connect","artistsToString","mapStateToProps","state","artists","currentSong","data","songName","name","connector","NowPlaying","artistNames","length","reduce","acc","push","height","width","textAlign","padding","fontSize","whiteSpace","overflow","textOverflow"],"mappings":";AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,eAAT,QAAgC,aAAhC;;AAEA,MAAMC,eAAe,GAAIC,KAAD;AAAA;;AAAA,SAAmB;AACzCC,IAAAA,OAAO,2BAAED,KAAK,CAACE,WAAN,CAAkBC,IAApB,0DAAE,sBAAwBF,OADQ;AAEzCG,IAAAA,QAAQ,4BAAEJ,KAAK,CAACE,WAAN,CAAkBC,IAApB,2DAAE,uBAAwBE,IAFO;AAGzCF,IAAAA,IAAI,EAAEH,KAAK,CAACE,WAAN,CAAkBC;AAHiB,GAAnB;AAAA,CAAxB;;AAMA,MAAMG,SAAS,GAAGT,OAAO,CAACE,eAAD,CAAzB;;AAIA,MAAMQ,UAAoC,GAAG,CAAC;AAC5CN,EAAAA,OAAO,GAAG,CAAC;AAAEI,IAAAA,IAAI,EAAE;AAAR,GAAD,CADkC;AAE5CF,EAAAA,IAF4C;AAG5CC,EAAAA,QAAQ,GAAG;AAHiC,CAAD,KAIzB;AAClB,MAAII,WAAW,GAAG,CAAC,gBAAD,CAAlB;;AAEA,MAAIP,OAAO,CAACQ,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACAD,IAAAA,WAAW,GAAGP,OAAO,CAACS,MAAR,CACZ,CAACC,GAAD,EAAgB;AAAEN,MAAAA;AAAF,KAAhB,KAA+C;AAC7CM,MAAAA,GAAG,CAACC,IAAJ,CAASP,IAAT;AACA,aAAOM,GAAP;AACD,KAJW,EAKZ,EALY,CAAd;AAOD;;AAED,sBACE;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,MAAM,EAAE,IADH;AAELC,MAAAA,KAAK,EAAE,KAFF;AAGLC,MAAAA,SAAS,EAAE,QAHN;AAILC,MAAAA,OAAO,EAAE;AAJJ,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,IAAI,GAAG,aAAH,GAAmB,iBAD1B,CARF,eAWE;AACE,IAAA,KAAK,EAAE;AACLc,MAAAA,QAAQ,EAAE,MADL;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,QAAQ,EAAE,QAHL;AAILC,MAAAA,YAAY,EAAE;AAJT,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGjB,IAAI,GACA,GAAEC,QAAS,MAAKN,eAAe,CAACU,WAAD,CAAc,EAD7C,GAED,8BAVN,CAXF,CADF;AA0BD,CA5CD;;AA8CA,eAAeF,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["import React, { ReactElement } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { State } from \"../../store/types\";\nimport { artistsToString } from \"../../utils\";\n\nconst mapStateToProps = (state: State) => ({\n  artists: state.currentSong.data?.artists,\n  songName: state.currentSong.data?.name,\n  data: state.currentSong.data\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst NowPlaying: React.FC<PropsFromRedux> = ({\n  artists = [{ name: \"Unknown Artist\" }],\n  data,\n  songName = \"Unknown\"\n}): ReactElement => {\n  let artistNames = [\"Unknown Artist\"];\n\n  if (artists.length > 0) {\n    // @ts-ignore error with typescript being unable to recognise union types correctly\n    artistNames = artists.reduce(\n      (acc: string[], { name }: { name: string }) => {\n        acc.push(name);\n        return acc;\n      },\n      []\n    );\n  }\n\n  return (\n    <div\n      style={{\n        height: \"5%\",\n        width: \"90%\",\n        textAlign: \"center\",\n        padding: \"5% 5% 2% 5%\"\n      }}\n    >\n      <div style={{ fontSize: \"24px\" }}>\n        {data ? \"NOW PLAYING\" : \"NOTHING PLAYING\"}\n      </div>\n      <div\n        style={{\n          fontSize: \"48px\",\n          whiteSpace: \"nowrap\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        }}\n      >\n        {data\n          ? `${songName} - ${artistsToString(artistNames)}`\n          : \"Please make a song selection\"}\n      </div>\n    </div>\n  );\n};\n\nexport default connector(NowPlaying);\n"]},"metadata":{},"sourceType":"module"}