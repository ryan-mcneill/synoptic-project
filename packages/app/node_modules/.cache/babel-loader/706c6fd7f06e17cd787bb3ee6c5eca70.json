{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Playlist.tsx\";\nimport React from \"react\";\nimport { InfoTile } from \"./\";\nimport { connect } from \"react-redux\";\nimport { artistsToString } from \"../../utils\";\nimport { changeSong, setIsOpen } from \"../../store/actions\";\nconst tabButtonStyles = {\n  height: \"8px\",\n  backgroundColor: \"black\",\n  position: \"relative\",\n  left: \"-50%\",\n  marginTop: \"8px\",\n  transition: \"all 0.5s ease\"\n};\n\nconst mapDispatchToProps = dispatch => ({\n  changeSong: id => dispatch(changeSong({\n    id\n  })),\n  setIsOpen: isOpen => dispatch(setIsOpen(isOpen))\n});\n\nconst mapStateToProps = state => ({\n  playlists: state.playlist.data,\n  selectedTab: state.menu.selectedTab\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst Playlist = ({\n  playlists,\n  changeSong,\n  setIsOpen,\n  selectedTab\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, selectedTab === \"PLAYLIST\" && playlists && playlists.length > 0 ? playlists.map(playlist => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${playlist._id}`,\n    title: playlist.name,\n    subtitle: artistsToString(playlist.artists),\n    onClick: () => {\n      changeSong(playlist._id);\n      setIsOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  })) : selectedTab === \"PLAYLIST\" && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"There are no song playlists currently selected.\"));\n};\n\nexport default connector(Playlist);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/Menu/Playlist.tsx"],"names":["React","InfoTile","connect","artistsToString","changeSong","setIsOpen","tabButtonStyles","height","backgroundColor","position","left","marginTop","transition","mapDispatchToProps","dispatch","id","isOpen","mapStateToProps","state","playlists","playlist","data","selectedTab","menu","connector","Playlist","length","map","_id","name","artists","fontSize","textAlign"],"mappings":";AAAA,OAAOA,KAAP,MAAuD,OAAvD;AAOA,SAASC,QAAT,QAAyB,IAAzB;AAEA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,eAAT,QAAgC,aAAhC;AAGA,SACEC,UADF,EAGEC,SAHF,QAKO,qBALP;AAOA,MAAMC,eAA8B,GAAG;AACrCC,EAAAA,MAAM,EAAE,KAD6B;AAErCC,EAAAA,eAAe,EAAE,OAFoB;AAGrCC,EAAAA,QAAQ,EAAE,UAH2B;AAIrCC,EAAAA,IAAI,EAAE,MAJ+B;AAKrCC,EAAAA,SAAS,EAAE,KAL0B;AAMrCC,EAAAA,UAAU,EAAE;AANyB,CAAvC;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmD;AAC5EV,EAAAA,UAAU,EAAGW,EAAD,IAAgBD,QAAQ,CAACV,UAAU,CAAC;AAAEW,IAAAA;AAAF,GAAD,CAAX,CADwC;AAE5EV,EAAAA,SAAS,EAAGW,MAAD,IAAsBF,QAAQ,CAACT,SAAS,CAACW,MAAD,CAAV;AAFmC,CAAnD,CAA3B;;AAKA,MAAMC,eAAe,GAAIC,KAAD,KAAmB;AACzCC,EAAAA,SAAS,EAAED,KAAK,CAACE,QAAN,CAAeC,IADe;AAEzCC,EAAAA,WAAW,EAAEJ,KAAK,CAACK,IAAN,CAAWD;AAFiB,CAAnB,CAAxB;;AAKA,MAAME,SAAS,GAAGtB,OAAO,CAACe,eAAD,EAAkBJ,kBAAlB,CAAzB;;AAIA,MAAMY,QAA4B,GAAG,CAAC;AACpCN,EAAAA,SADoC;AAEpCf,EAAAA,UAFoC;AAGpCC,EAAAA,SAHoC;AAIpCiB,EAAAA;AAJoC,CAAD,KAKjB;AAClB,sBACE,0CACGA,WAAW,KAAK,UAAhB,IAA8BH,SAA9B,IAA2CA,SAAS,CAACO,MAAV,GAAmB,CAA9D,GACGP,SAAS,CAACQ,GAAV,CAAeP,QAAD,iBACZ,oBAAC,QAAD;AACE,IAAA,GAAG,EAAG,aAAYA,QAAQ,CAACQ,GAAI,EADjC;AAEE,IAAA,KAAK,EAAER,QAAQ,CAACS,IAFlB;AAGE,IAAA,QAAQ,EAAE1B,eAAe,CAACiB,QAAQ,CAACU,OAAV,CAH3B;AAIE,IAAA,OAAO,EAAE,MAAM;AACb1B,MAAAA,UAAU,CAACgB,QAAQ,CAACQ,GAAV,CAAV;AACAvB,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADH,GAYGiB,WAAW,KAAK,UAAhB,iBACE;AAAK,IAAA,KAAK,EAAE;AAAES,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAdR,CADF;AAqBD,CA3BD;;AA6BA,eAAeR,SAAS,CAACC,QAAD,CAAxB","sourcesContent":["import React, { CSSProperties, FC, ReactElement } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBars,\n  faRecordVinyl,\n  faUsers\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { InfoTile } from \"./\";\nimport { State, Tabs } from \"../../store/types\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { artistsToString } from \"../../utils\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport {\n  changeSong,\n  fetchSongs,\n  setIsOpen,\n  setSelectedTab\n} from \"../../store/actions\";\n\nconst tabButtonStyles: CSSProperties = {\n  height: \"8px\",\n  backgroundColor: \"black\",\n  position: \"relative\",\n  left: \"-50%\",\n  marginTop: \"8px\",\n  transition: \"all 0.5s ease\"\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  changeSong: (id: string) => dispatch(changeSong({ id })),\n  setIsOpen: (isOpen?: boolean) => dispatch(setIsOpen(isOpen))\n});\n\nconst mapStateToProps = (state: State) => ({\n  playlists: state.playlist.data,\n  selectedTab: state.menu.selectedTab\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst Playlist: FC<PropsFromRedux> = ({\n  playlists,\n  changeSong,\n  setIsOpen,\n  selectedTab\n}): ReactElement => {\n  return (\n    <>\n      {selectedTab === \"PLAYLIST\" && playlists && playlists.length > 0\n        ? playlists.map((playlist) => (\n            <InfoTile\n              key={`info-tile-${playlist._id}`}\n              title={playlist.name}\n              subtitle={artistsToString(playlist.artists)}\n              onClick={() => {\n                changeSong(playlist._id);\n                setIsOpen(false);\n              }}\n            />\n          ))\n        : selectedTab === \"PLAYLIST\" && (\n            <div style={{ fontSize: \"48px\", textAlign: \"center\" }}>\n              There are no song playlists currently selected.\n            </div>\n          )}\n    </>\n  );\n};\n\nexport default connector(Playlist);\n"]},"metadata":{},"sourceType":"module"}