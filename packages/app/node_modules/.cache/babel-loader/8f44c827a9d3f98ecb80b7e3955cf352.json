{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/MusicPlayer/NowPlaying.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { artistsToString } from \"../../utils\";\n\nconst mapStateToProps = state => {\n  var _state$currentSong$da, _state$currentSong$da2;\n\n  return {\n    artists: (_state$currentSong$da = state.currentSong.data) === null || _state$currentSong$da === void 0 ? void 0 : _state$currentSong$da.artists,\n    songName: (_state$currentSong$da2 = state.currentSong.data) === null || _state$currentSong$da2 === void 0 ? void 0 : _state$currentSong$da2.name\n  };\n};\n\nconst connector = connect(mapStateToProps);\n\nconst NowPlaying = ({\n  artists = [{\n    name: \"Unknown Artist\"\n  }],\n  songName\n}) => {\n  let artistNames = [\"Unknown Artist\"];\n\n  if (artists.length > 0) {\n    // @ts-ignore error with typescript being unable to recognise union types correctly\n    artistNames = artists.reduce((acc, {\n      name\n    }) => {\n      acc.push(name);\n      return acc;\n    }, []);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"24px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"NOW PLAYING\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, songName, \" - \", artistsToString(artistNames)));\n};\n\nexport default connector(NowPlaying);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/MusicPlayer/NowPlaying.tsx"],"names":["React","connect","artistsToString","mapStateToProps","state","artists","currentSong","data","songName","name","connector","NowPlaying","artistNames","length","reduce","acc","push","fontSize","whiteSpace","overflow","textOverflow"],"mappings":";AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,eAAT,QAAgC,aAAhC;;AAEA,MAAMC,eAAe,GAAIC,KAAD;AAAA;;AAAA,SAAmB;AACzCC,IAAAA,OAAO,2BAAED,KAAK,CAACE,WAAN,CAAkBC,IAApB,0DAAE,sBAAwBF,OADQ;AAEzCG,IAAAA,QAAQ,4BAAEJ,KAAK,CAACE,WAAN,CAAkBC,IAApB,2DAAE,uBAAwBE;AAFO,GAAnB;AAAA,CAAxB;;AAKA,MAAMC,SAAS,GAAGT,OAAO,CAACE,eAAD,CAAzB;;AAIA,MAAMQ,UAAoC,GAAG,CAAC;AAC5CN,EAAAA,OAAO,GAAG,CAAC;AAAEI,IAAAA,IAAI,EAAE;AAAR,GAAD,CADkC;AAE5CD,EAAAA;AAF4C,CAAD,KAGzB;AAClB,MAAII,WAAW,GAAG,CAAC,gBAAD,CAAlB;;AAEA,MAAIP,OAAO,CAACQ,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACAD,IAAAA,WAAW,GAAGP,OAAO,CAACS,MAAR,CACZ,CAACC,GAAD,EAAgB;AAAEN,MAAAA;AAAF,KAAhB,KAA+C;AAC7CM,MAAAA,GAAG,CAACC,IAAJ,CAASP,IAAT;AACA,aAAOM,GAAP;AACD,KAJW,EAKZ,EALY,CAAd;AAOD;;AAED,sBACE,uDACE;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,QAAQ,EAAE,MADL;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,QAAQ,EAAE,QAHL;AAILC,MAAAA,YAAY,EAAE;AAJT,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGZ,QARH,SAQgBN,eAAe,CAACU,WAAD,CAR/B,CAFF,CADF;AAeD,CAhCD;;AAkCA,eAAeF,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["import React, { ReactElement } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { State } from \"../../store/types\";\nimport { artistsToString } from \"../../utils\";\n\nconst mapStateToProps = (state: State) => ({\n  artists: state.currentSong.data?.artists,\n  songName: state.currentSong.data?.name\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst NowPlaying: React.FC<PropsFromRedux> = ({\n  artists = [{ name: \"Unknown Artist\" }],\n  songName\n}): ReactElement => {\n  let artistNames = [\"Unknown Artist\"];\n\n  if (artists.length > 0) {\n    // @ts-ignore error with typescript being unable to recognise union types correctly\n    artistNames = artists.reduce(\n      (acc: string[], { name }: { name: string }) => {\n        acc.push(name);\n        return acc;\n      },\n      []\n    );\n  }\n\n  return (\n    <>\n      <div style={{ fontSize: \"24px\" }}>NOW PLAYING</div>\n      <div\n        style={{\n          fontSize: \"48px\",\n          whiteSpace: \"nowrap\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        }}\n      >\n        {songName} - {artistsToString(artistNames)}\n      </div>\n    </>\n  );\n};\n\nexport default connector(NowPlaying);\n"]},"metadata":{},"sourceType":"module"}