{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_PLAYLIST_FAILURE, FETCH_PLAYLIST_STARTED, FETCH_PLAYLIST_SUCCESS } from \"../types\";\n\nconst fetchPlaylistFailure = error => ({\n  type: FETCH_PLAYLIST_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchPlaylistStarted = () => ({\n  type: FETCH_PLAYLIST_STARTED\n});\n\nconst fetchPlaylistSuccess = playlist => ({\n  type: FETCH_PLAYLIST_SUCCESS,\n  payload: { ...playlist\n  }\n});\n\nexport const fetchPlaylist = () => {\n  console.log(\"here\");\n  return (dispatch, getState) => {\n    console.log(\"current state: \", getState());\n    dispatch(fetchPlaylistStarted());\n    axios.get(\"/api/song\").then(res => {\n      dispatch(fetchPlaylistSuccess(res.data));\n    }).catch(err => {\n      dispatch(fetchPlaylistFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/client/src/store/actions/playlistActions.ts"],"names":["axios","FETCH_PLAYLIST_FAILURE","FETCH_PLAYLIST_STARTED","FETCH_PLAYLIST_SUCCESS","fetchPlaylistFailure","error","type","payload","fetchPlaylistStarted","fetchPlaylistSuccess","playlist","fetchPlaylist","console","log","dispatch","getState","get","then","res","data","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,sBADF,EAEEC,sBAFF,EAGEC,sBAHF,QAQO,UARP;;AAUA,MAAMC,oBAA+D,GACnEC,KADsE,KAElE;AACJC,EAAAA,IAAI,EAAEL,sBADF;AAEJM,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAFL,CAFkE,CAAxE;;AAOA,MAAMG,oBAA+D,GAAG,OAAO;AAC7EF,EAAAA,IAAI,EAAEJ;AADuE,CAAP,CAAxE;;AAIA,MAAMO,oBAA+D,GACnEC,QADsE,KAElE;AACJJ,EAAAA,IAAI,EAAEH,sBADF;AAEJI,EAAAA,OAAO,EAAE,EACP,GAAGG;AADI;AAFL,CAFkE,CAAxE;;AASA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,SAAO,CAACC,QAAD,EAAqBC,QAArB,KAA+C;AACpDH,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,QAAQ,EAAvC;AACAD,IAAAA,QAAQ,CAACN,oBAAoB,EAArB,CAAR;AAEAR,IAAAA,KAAK,CACFgB,GADH,CACO,WADP,EAEGC,IAFH,CAESC,GAAD,IAAS;AACbJ,MAAAA,QAAQ,CAACL,oBAAoB,CAACS,GAAG,CAACC,IAAL,CAArB,CAAR;AACD,KAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdP,MAAAA,QAAQ,CAACV,oBAAoB,CAACiB,GAAG,CAACC,OAAL,CAArB,CAAR;AACD,KAPH;AAQD,GAZD;AAaD,CAfM","sourcesContent":["import axios from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  FETCH_PLAYLIST_FAILURE,\n  FETCH_PLAYLIST_STARTED,\n  FETCH_PLAYLIST_SUCCESS,\n  FetchPlaylistFailureAction,\n  FetchPlaylistStartedAction,\n  FetchPlaylistSuccessAction,\n  State\n} from \"../types\";\n\nconst fetchPlaylistFailure: ActionCreator<FetchPlaylistFailureAction> = (\n  error\n) => ({\n  type: FETCH_PLAYLIST_FAILURE,\n  payload: { error }\n});\n\nconst fetchPlaylistStarted: ActionCreator<FetchPlaylistStartedAction> = () => ({\n  type: FETCH_PLAYLIST_STARTED\n});\n\nconst fetchPlaylistSuccess: ActionCreator<FetchPlaylistSuccessAction> = (\n  playlist\n) => ({\n  type: FETCH_PLAYLIST_SUCCESS,\n  payload: {\n    ...playlist\n  }\n});\n\nexport const fetchPlaylist = () => {\n  console.log(\"here\");\n  return (dispatch: Dispatch, getState: () => State) => {\n    console.log(\"current state: \", getState());\n    dispatch(fetchPlaylistStarted());\n\n    axios\n      .get(\"/api/song\")\n      .then((res) => {\n        dispatch(fetchPlaylistSuccess(res.data));\n      })\n      .catch((err) => {\n        dispatch(fetchPlaylistFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}