{"ast":null,"code":"import axios from \"axios\";\nimport { ADD_TO_PLAYLIST, ADD_TO_PLAYLIST_FAILURE, ADD_TO_PLAYLIST_SUCCESS, FETCH_PLAYLISTS, FETCH_PLAYLISTS_FAILURE, FETCH_PLAYLISTS_SUCCESS } from \"../types\";\n\nconst fetchPlaylistsAction = () => ({\n  type: FETCH_PLAYLISTS\n});\n\nconst fetchPlaylistsFailure = error => ({\n  type: FETCH_PLAYLISTS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchPlaylistsSuccess = playlists => ({\n  type: FETCH_PLAYLISTS_SUCCESS,\n  payload: playlists\n});\n\nexport const fetchPlaylists = () => {\n  return dispatch => {\n    dispatch(fetchPlaylistsAction());\n    axios.get(`/api/playlists`).then(playlistResponse => {\n      Promise.all(playlistResponse.data.map(playlist => axios.get(`/api/songs/playlist/${playlist._id}`).then(songResponse => ({\n        [playlist._id]: songResponse.data\n      })))).then(songs => {\n        const flatSongs = songs.reduce((acc, curr) => {\n          acc = { ...acc,\n            ...curr\n          };\n          return acc;\n        }, {});\n        const playlistsData = playlistResponse.data.reduce((acc, {\n          _id,\n          name\n        }) => {\n          acc = { ...acc,\n            [_id]: {\n              name,\n              songs: flatSongs[_id]\n            }\n          };\n          return acc;\n        }, {});\n        dispatch(fetchPlaylistsSuccess(playlistsData));\n      }).catch(err => {\n        dispatch(fetchPlaylistsFailure(err.message));\n      });\n    }).catch(err => {\n      dispatch(fetchPlaylistsFailure(err.message));\n    });\n  };\n};\n\nconst addToPlaylistAction = () => ({\n  type: ADD_TO_PLAYLIST\n});\n\nconst addToPlaylistFailure = error => ({\n  type: ADD_TO_PLAYLIST_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst addToPlaylistSuccess = playlists => ({\n  type: ADD_TO_PLAYLIST_SUCCESS,\n  payload: playlists\n});\n\nexport const addToPlaylist = ({\n  playlistId,\n  songId,\n  name\n}) => {\n  return (dispatch, getState) => {\n    dispatch(addToPlaylistAction());\n    const state = getState();\n    const requestUrl = playlistId ? `/api/playlist/${playlistId}` : `/api/playlist/new`;\n    const existingSongs = state.playlists.data && playlistId ? state.playlists.data[playlistId].songs.map(({\n      _id\n    }) => _id) : [songId];\n    const songs = !existingSongs.includes(songId) ? existingSongs.concat(songId) : existingSongs;\n    console.log(requestUrl);\n    axios.post(requestUrl, {\n      name,\n      songs\n    }).then(() => {\n      dispatch(addToPlaylistSuccess());\n      dispatch(fetchPlaylists());\n    }).catch(error => dispatch(addToPlaylistFailure(error)));\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/playlistsActions.ts"],"names":["axios","ADD_TO_PLAYLIST","ADD_TO_PLAYLIST_FAILURE","ADD_TO_PLAYLIST_SUCCESS","FETCH_PLAYLISTS","FETCH_PLAYLISTS_FAILURE","FETCH_PLAYLISTS_SUCCESS","fetchPlaylistsAction","type","fetchPlaylistsFailure","error","payload","fetchPlaylistsSuccess","playlists","fetchPlaylists","dispatch","get","then","playlistResponse","Promise","all","data","map","playlist","_id","songResponse","songs","flatSongs","reduce","acc","curr","playlistsData","name","catch","err","message","addToPlaylistAction","addToPlaylistFailure","addToPlaylistSuccess","addToPlaylist","playlistId","songId","getState","state","requestUrl","existingSongs","includes","concat","console","log","post"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { Action, ActionCreator, Dispatch } from \"redux\";\nimport {\n  ADD_TO_PLAYLIST,\n  ADD_TO_PLAYLIST_FAILURE,\n  ADD_TO_PLAYLIST_SUCCESS,\n  AddToPlaylistAction,\n  AddToPlaylistFailureAction,\n  AddToPlaylistSuccessAction,\n  BasicDetails,\n  FETCH_PLAYLISTS,\n  FETCH_PLAYLISTS_FAILURE,\n  FETCH_PLAYLISTS_SUCCESS,\n  FetchPlaylistsAction,\n  FetchPlaylistsFailureAction,\n  FetchPlaylistsSuccessAction,\n  Song,\n  State\n} from \"../types\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\nconst fetchPlaylistsAction: ActionCreator<FetchPlaylistsAction> = () => ({\n  type: FETCH_PLAYLISTS\n});\n\nconst fetchPlaylistsFailure: ActionCreator<FetchPlaylistsFailureAction> = (\n  error\n) => ({\n  type: FETCH_PLAYLISTS_FAILURE,\n  payload: { error }\n});\n\nconst fetchPlaylistsSuccess: ActionCreator<FetchPlaylistsSuccessAction> = (\n  playlists\n) => ({\n  type: FETCH_PLAYLISTS_SUCCESS,\n  payload: playlists\n});\n\nexport const fetchPlaylists = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchPlaylistsAction());\n\n    axios\n      .get(`/api/playlists`)\n      .then((playlistResponse: AxiosResponse<Song[]>) => {\n        Promise.all(\n          playlistResponse.data.map((playlist: BasicDetails) =>\n            axios\n              .get(`/api/songs/playlist/${playlist._id}`)\n              .then((songResponse) => ({\n                [playlist._id]: songResponse.data\n              }))\n          )\n        )\n          .then((songs) => {\n            const flatSongs = songs.reduce((acc, curr) => {\n              acc = { ...acc, ...curr };\n              return acc;\n            }, {});\n\n            const playlistsData = playlistResponse.data.reduce(\n              (acc: {}, { _id, name }: Song) => {\n                acc = {\n                  ...acc,\n                  [_id]: { name, songs: flatSongs[_id] }\n                };\n                return acc;\n              },\n              {}\n            );\n            dispatch(fetchPlaylistsSuccess(playlistsData));\n          })\n          .catch((err: Error) => {\n            dispatch(fetchPlaylistsFailure(err.message));\n          });\n      })\n      .catch((err: Error) => {\n        dispatch(fetchPlaylistsFailure(err.message));\n      });\n  };\n};\n\nconst addToPlaylistAction: ActionCreator<AddToPlaylistAction> = () => ({\n  type: ADD_TO_PLAYLIST\n});\n\nconst addToPlaylistFailure: ActionCreator<AddToPlaylistFailureAction> = (\n  error\n) => ({\n  type: ADD_TO_PLAYLIST_FAILURE,\n  payload: { error }\n});\n\nconst addToPlaylistSuccess: ActionCreator<AddToPlaylistSuccessAction> = (\n  playlists\n) => ({\n  type: ADD_TO_PLAYLIST_SUCCESS,\n  payload: playlists\n});\n\nexport const addToPlaylist = ({\n  playlistId,\n  songId,\n  name\n}: {\n  playlistId?: string;\n  songId: string;\n  name: string;\n}) => {\n  return (\n    dispatch: ThunkDispatch<State, void, Action>,\n    getState: () => State\n  ) => {\n    dispatch(addToPlaylistAction());\n    const state = getState();\n    const requestUrl = playlistId\n      ? `/api/playlist/${playlistId}`\n      : `/api/playlist/new`;\n    const existingSongs =\n      state.playlists.data && playlistId\n        ? state.playlists.data[playlistId].songs.map(({ _id }) => _id)\n        : [songId];\n    const songs = !existingSongs.includes(songId)\n      ? existingSongs.concat(songId)\n      : existingSongs;\n\n    console.log(requestUrl);\n\n    axios\n      .post(requestUrl, { name, songs })\n      .then(() => {\n        dispatch(addToPlaylistSuccess());\n        dispatch(fetchPlaylists());\n      })\n      .catch((error) => dispatch(addToPlaylistFailure(error)));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}