{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_ALBUMS, FETCH_ALBUMS_FAILURE, FETCH_ALBUMS_SUCCESS } from \"../types\";\n\nconst fetchAlbumsAction = () => ({\n  type: FETCH_ALBUMS\n});\n\nconst fetchAlbumsFailure = error => ({\n  type: FETCH_ALBUMS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchAlbumsSuccess = albums => ({\n  type: FETCH_ALBUMS_SUCCESS,\n  payload: albums\n});\n\nexport const fetchAlbums = () => {\n  return dispatch => {\n    dispatch(fetchAlbumsAction());\n    axios.get(`/api/albums`).then(albumResponse => {\n      Promise.all(albumResponse.data.map(album => axios.get(`/api/songs/album/${album._id}`).then(songResponse => ({\n        [album._id]: songResponse.data\n      })))).then(songs => {\n        console.log(songs);\n        let albumsData = albumResponse.data.reduce((acc, curr) => {\n          console.log(curr); // @ts-ignore\n\n          acc = { ...acc,\n            [curr._id]: {\n              name: curr.name,\n              songs: songs[curr.albums[0]._id]\n            }\n          };\n          return acc;\n        }, {});\n        dispatch(fetchAlbumsSuccess(albumsData));\n      }).catch(err => {\n        dispatch(fetchAlbumsFailure(err.message));\n      });\n    }).catch(err => {\n      dispatch(fetchAlbumsFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/albumsActions.ts"],"names":["axios","FETCH_ALBUMS","FETCH_ALBUMS_FAILURE","FETCH_ALBUMS_SUCCESS","fetchAlbumsAction","type","fetchAlbumsFailure","error","payload","fetchAlbumsSuccess","albums","fetchAlbums","dispatch","get","then","albumResponse","Promise","all","data","map","album","_id","songResponse","songs","console","log","albumsData","reduce","acc","curr","name","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;AAEA,SAEEC,YAFF,EAGEC,oBAHF,EAIEC,oBAJF,QAQO,UARP;;AAUA,MAAMC,iBAAmD,GAAG,OAAO;AACjEC,EAAAA,IAAI,EAAEJ;AAD2D,CAAP,CAA5D;;AAIA,MAAMK,kBAA2D,GAC/DC,KADkE,KAE9D;AACJF,EAAAA,IAAI,EAAEH,oBADF;AAEJM,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAFL,CAF8D,CAApE;;AAOA,MAAME,kBAA2D,GAC/DC,MADkE,KAE9D;AACJL,EAAAA,IAAI,EAAEF,oBADF;AAEJK,EAAAA,OAAO,EAAEE;AAFL,CAF8D,CAApE;;AAOA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AAEAJ,IAAAA,KAAK,CACFa,GADH,CACQ,aADR,EAEGC,IAFH,CAESC,aAAD,IAA0C;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CACEF,aAAa,CAACG,IAAd,CAAmBC,GAAnB,CAAwBC,KAAD,IACrBpB,KAAK,CACFa,GADH,CACQ,oBAAmBO,KAAK,CAACC,GAAI,EADrC,EAEGP,IAFH,CAESQ,YAAD,KAAmB;AAAE,SAACF,KAAK,CAACC,GAAP,GAAaC,YAAY,CAACJ;AAA5B,OAAnB,CAFR,CADF,CADF,EAOGJ,IAPH,CAOSS,KAAD,IAAW;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,YAAIG,UAAU,GAAGX,aAAa,CAACG,IAAd,CAAmBS,MAAnB,CACf,CAACC,GAAD,EAAUC,IAAV,KAAyB;AACvBL,UAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ,EADuB,CAEvB;;AACAD,UAAAA,GAAG,GAAG,EAAE,GAAGA,GAAL;AAAU,aAACC,IAAI,CAACR,GAAN,GAAY;AAAES,cAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBP,cAAAA,KAAK,EAAEA,KAAK,CAACM,IAAI,CAACnB,MAAL,CAAY,CAAZ,EAAeW,GAAhB;AAA/B;AAAtB,WAAN;AACA,iBAAOO,GAAP;AACD,SANc,EAOf,EAPe,CAAjB;AASAhB,QAAAA,QAAQ,CAACH,kBAAkB,CAACiB,UAAD,CAAnB,CAAR;AACD,OAnBH,EAoBGK,KApBH,CAoBUC,GAAD,IAAS;AACdpB,QAAAA,QAAQ,CAACN,kBAAkB,CAAC0B,GAAG,CAACC,OAAL,CAAnB,CAAR;AACD,OAtBH;AAuBD,KA1BH,EA2BGF,KA3BH,CA2BUC,GAAD,IAAS;AACdpB,MAAAA,QAAQ,CAACN,kBAAkB,CAAC0B,GAAG,CAACC,OAAL,CAAnB,CAAR;AACD,KA7BH;AA8BD,GAjCD;AAkCD,CAnCM","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  BasicDetails,\n  FETCH_ALBUMS,\n  FETCH_ALBUMS_FAILURE,\n  FETCH_ALBUMS_SUCCESS,\n  FetchAlbumsAction,\n  FetchAlbumsFailureAction,\n  FetchAlbumsSuccessAction, Song\n} from \"../types\";\n\nconst fetchAlbumsAction: ActionCreator<FetchAlbumsAction> = () => ({\n  type: FETCH_ALBUMS\n});\n\nconst fetchAlbumsFailure: ActionCreator<FetchAlbumsFailureAction> = (\n  error\n) => ({\n  type: FETCH_ALBUMS_FAILURE,\n  payload: { error }\n});\n\nconst fetchAlbumsSuccess: ActionCreator<FetchAlbumsSuccessAction> = (\n  albums\n) => ({\n  type: FETCH_ALBUMS_SUCCESS,\n  payload: albums\n});\n\nexport const fetchAlbums = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchAlbumsAction());\n\n    axios\n      .get(`/api/albums`)\n      .then((albumResponse: AxiosResponse<Song[]>) => {\n        Promise.all(\n          albumResponse.data.map((album: BasicDetails) =>\n            axios\n              .get(`/api/songs/album/${album._id}`)\n              .then((songResponse) => ({ [album._id]: songResponse.data }))\n          )\n        )\n          .then((songs) => {\n            console.log(songs)\n            let albumsData = albumResponse.data.reduce(\n              (acc: {}, curr: Song) => {\n                console.log(curr)\n                // @ts-ignore\n                acc = { ...acc, [curr._id]: { name: curr.name, songs: songs[curr.albums[0]._id] } };\n                return acc;\n              },\n              {}\n            );\n            dispatch(fetchAlbumsSuccess(albumsData));\n          })\n          .catch((err) => {\n            dispatch(fetchAlbumsFailure(err.message));\n          });\n      })\n      .catch((err) => {\n        dispatch(fetchAlbumsFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}