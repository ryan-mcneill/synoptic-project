{"ast":null,"code":"import get from \"axios\";\nimport { ADD_TO_PLAYLIST, ADD_TO_PLAYLIST_FAILURE, ADD_TO_PLAYLIST_SUCCESS, FETCH_PLAYLISTS, FETCH_PLAYLISTS_FAILURE, FETCH_PLAYLISTS_SUCCESS } from \"../types\";\n\nconst fetchPlaylistsAction = () => ({\n  type: FETCH_PLAYLISTS\n});\n\nconst fetchPlaylistsFailure = error => ({\n  type: FETCH_PLAYLISTS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchPlaylistsSuccess = playlists => ({\n  type: FETCH_PLAYLISTS_SUCCESS,\n  payload: playlists\n});\n\nexport const fetchPlaylists = () => {\n  return dispatch => {\n    dispatch(fetchPlaylistsAction());\n    get(`/api/playlists`).then(playlistResponse => {\n      Promise.all(playlistResponse.data.map(playlist => get(`/api/songs/playlist/${playlist._id}`).then(songResponse => ({\n        [playlist._id]: songResponse.data\n      })))).then(songs => {\n        const flatSongs = songs.reduce((acc, curr) => {\n          acc = { ...acc,\n            ...curr\n          };\n          return acc;\n        }, {});\n        const playlistsData = playlistResponse.data.reduce((acc, {\n          _id,\n          name\n        }) => {\n          acc = { ...acc,\n            [_id]: {\n              name,\n              songs: flatSongs[_id]\n            }\n          };\n          return acc;\n        }, {});\n        dispatch(fetchPlaylistsSuccess(playlistsData));\n      }).catch(err => {\n        dispatch(fetchPlaylistsFailure(err.message));\n      });\n    }).catch(err => {\n      dispatch(fetchPlaylistsFailure(err.message));\n    });\n  };\n};\n\nconst addToPlaylistAction = () => ({\n  type: ADD_TO_PLAYLIST\n});\n\nconst addToPlaylistFailure = error => ({\n  type: ADD_TO_PLAYLIST_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst addToPlaylistSuccess = playlists => ({\n  type: ADD_TO_PLAYLIST_SUCCESS,\n  payload: playlists\n});\n\nexport const addToPlaylist = () => {\n  return dispatch => {\n    dispatch(addToPlaylistAction());\n    get(`/api/playlists`).then(playlistResponse => {\n      Promise.all(playlistResponse.data.map(playlist => get(`/api/songs/playlist/${playlist._id}`).then(songResponse => ({\n        [playlist._id]: songResponse.data\n      })))).then(songs => {\n        const flatSongs = songs.reduce((acc, curr) => {\n          acc = { ...acc,\n            ...curr\n          };\n          return acc;\n        }, {});\n        const playlistsData = playlistResponse.data.reduce((acc, {\n          _id,\n          name\n        }) => {\n          acc = { ...acc,\n            [_id]: {\n              name,\n              songs: flatSongs[_id]\n            }\n          };\n          return acc;\n        }, {});\n        dispatch(addToPlaylistSuccess(playlistsData));\n      }).catch(err => {\n        dispatch(addToPlaylistFailure(err.message));\n      });\n    }).catch(err => {\n      dispatch(addToPlaylistFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/playlistsActions.ts"],"names":["get","ADD_TO_PLAYLIST","ADD_TO_PLAYLIST_FAILURE","ADD_TO_PLAYLIST_SUCCESS","FETCH_PLAYLISTS","FETCH_PLAYLISTS_FAILURE","FETCH_PLAYLISTS_SUCCESS","fetchPlaylistsAction","type","fetchPlaylistsFailure","error","payload","fetchPlaylistsSuccess","playlists","fetchPlaylists","dispatch","then","playlistResponse","Promise","all","data","map","playlist","_id","songResponse","songs","flatSongs","reduce","acc","curr","playlistsData","name","catch","err","message","addToPlaylistAction","addToPlaylistFailure","addToPlaylistSuccess","addToPlaylist"],"mappings":"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","sourcesContent":["import get, { AxiosResponse } from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  ADD_TO_PLAYLIST,\n  ADD_TO_PLAYLIST_FAILURE,\n  ADD_TO_PLAYLIST_SUCCESS,\n  AddToPlaylistAction,\n  AddToPlaylistFailureAction,\n  AddToPlaylistSuccessAction,\n  BasicDetails,\n  FETCH_PLAYLISTS,\n  FETCH_PLAYLISTS_FAILURE,\n  FETCH_PLAYLISTS_SUCCESS,\n  FetchPlaylistsAction,\n  FetchPlaylistsFailureAction,\n  FetchPlaylistsSuccessAction,\n  Song\n} from \"../types\";\n\nconst fetchPlaylistsAction: ActionCreator<FetchPlaylistsAction> = () => ({\n  type: FETCH_PLAYLISTS\n});\n\nconst fetchPlaylistsFailure: ActionCreator<FetchPlaylistsFailureAction> = (\n  error\n) => ({\n  type: FETCH_PLAYLISTS_FAILURE,\n  payload: { error }\n});\n\nconst fetchPlaylistsSuccess: ActionCreator<FetchPlaylistsSuccessAction> = (\n  playlists\n) => ({\n  type: FETCH_PLAYLISTS_SUCCESS,\n  payload: playlists\n});\n\nexport const fetchPlaylists = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchPlaylistsAction());\n\n    get(`/api/playlists`)\n      .then((playlistResponse: AxiosResponse<Song[]>) => {\n        Promise.all(\n          playlistResponse.data.map((playlist: BasicDetails) =>\n            get(`/api/songs/playlist/${playlist._id}`).then((songResponse) => ({\n              [playlist._id]: songResponse.data\n            }))\n          )\n        )\n          .then((songs) => {\n            const flatSongs = songs.reduce((acc, curr) => {\n              acc = { ...acc, ...curr };\n              return acc;\n            }, {});\n\n            const playlistsData = playlistResponse.data.reduce(\n              (acc: {}, { _id, name }: Song) => {\n                acc = {\n                  ...acc,\n                  [_id]: { name, songs: flatSongs[_id] }\n                };\n                return acc;\n              },\n              {}\n            );\n            dispatch(fetchPlaylistsSuccess(playlistsData));\n          })\n          .catch((err: Error) => {\n            dispatch(fetchPlaylistsFailure(err.message));\n          });\n      })\n      .catch((err: Error) => {\n        dispatch(fetchPlaylistsFailure(err.message));\n      });\n  };\n};\n\nconst addToPlaylistAction: ActionCreator<AddToPlaylistAction> = () => ({\n  type: ADD_TO_PLAYLIST\n});\n\nconst addToPlaylistFailure: ActionCreator<AddToPlaylistFailureAction> = (\n  error\n) => ({\n  type: ADD_TO_PLAYLIST_FAILURE,\n  payload: { error }\n});\n\nconst addToPlaylistSuccess: ActionCreator<AddToPlaylistSuccessAction> = (\n  playlists\n) => ({\n  type: ADD_TO_PLAYLIST_SUCCESS,\n  payload: playlists\n});\n\nexport const addToPlaylist = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(addToPlaylistAction());\n\n    get(`/api/playlists`)\n      .then((playlistResponse: AxiosResponse<Song[]>) => {\n        Promise.all(\n          playlistResponse.data.map((playlist: BasicDetails) =>\n            get(`/api/songs/playlist/${playlist._id}`).then((songResponse) => ({\n              [playlist._id]: songResponse.data\n            }))\n          )\n        )\n          .then((songs) => {\n            const flatSongs = songs.reduce((acc, curr) => {\n              acc = { ...acc, ...curr };\n              return acc;\n            }, {});\n\n            const playlistsData = playlistResponse.data.reduce(\n              (acc: {}, { _id, name }: Song) => {\n                acc = {\n                  ...acc,\n                  [_id]: { name, songs: flatSongs[_id] }\n                };\n                return acc;\n              },\n              {}\n            );\n            dispatch(addToPlaylistSuccess(playlistsData));\n          })\n          .catch((err: Error) => {\n            dispatch(addToPlaylistFailure(err.message));\n          });\n      })\n      .catch((err: Error) => {\n        dispatch(addToPlaylistFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}