{"ast":null,"code":"import { FETCH_PLAYLIST, FETCH_PLAYLIST_FAILURE, FETCH_PLAYLIST_SUCCESS } from \"../types\";\nconst initialState = {\n  loading: false,\n  data: [],\n  error: null\n};\nexport const playlist = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PLAYLIST:\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_PLAYLIST_FAILURE:\n      return { ...state,\n        loading: false,\n        error: action.payload.error\n      };\n\n    case FETCH_PLAYLIST_SUCCESS:\n      return { ...state,\n        loading: false,\n        error: null,\n        data: action.payload\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/client/src/store/reducers/playlistReducers.ts"],"names":["FETCH_PLAYLIST","FETCH_PLAYLIST_FAILURE","FETCH_PLAYLIST_SUCCESS","initialState","loading","data","error","playlist","state","action","type","payload"],"mappings":"AAAA,SACEA,cADF,EAEEC,sBAFF,EAGEC,sBAHF,QAMO,UANP;AAcA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,OAAO,EAAE,KADyB;AAElCC,EAAAA,IAAI,EAAE,EAF4B;AAGlCC,EAAAA,KAAK,EAAE;AAH2B,CAApC;AAMA,OAAO,MAAMC,QAAQ,GAAG,CACtBC,KAAoB,GAAGL,YADD,EAEtBM,MAFsB,KAGnB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKH,sBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLE,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAHjB,OAAP;;AAKF,SAAKJ,sBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLE,QAAAA,KAAK,EAAE,IAHF;AAILD,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAJR,OAAP;;AAMF;AAAS;AACP,eAAOH,KAAP;AACD;AArBH;AAuBD,CA3BM","sourcesContent":["import {\n  FETCH_PLAYLIST,\n  FETCH_PLAYLIST_FAILURE,\n  FETCH_PLAYLIST_SUCCESS,\n  PlaylistActions,\n  Song\n} from \"../types\";\n\ninterface PlaylistState {\n  error: any;\n  loading: boolean;\n  data: Song[] | [];\n}\n\nconst initialState: PlaylistState = {\n  loading: false,\n  data: [],\n  error: null\n};\n\nexport const playlist = (\n  state: PlaylistState = initialState,\n  action: PlaylistActions\n) => {\n  switch (action.type) {\n    case FETCH_PLAYLIST:\n      return {\n        ...state,\n        loading: true\n      };\n    case FETCH_PLAYLIST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      };\n    case FETCH_PLAYLIST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        data: action.payload\n      };\n    default: {\n      return state;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}