{"ast":null,"code":"import get from \"axios\";\nimport { FETCH_SONGS, FETCH_SONGS_FAILURE, FETCH_SONGS_SUCCESS, PLAYLIST_ADD, PLAYLIST_REMOVE, UPDATE_PLAYLIST } from \"../types\";\nimport { getBackground } from \"./index\";\n// @ts-ignore\nexport const setPlaylist = songs => {\n  const firstSong = songs[0];\n  const nextSongs = songs.slice(1, songs.length);\n  return {\n    type: UPDATE_PLAYLIST,\n    payload: {\n      firstSong,\n      nextSongs\n    }\n  };\n};\nexport const playlistAdd = song => ({\n  type: PLAYLIST_ADD,\n  payload: song\n});\nexport const playlistRemove = song => ({\n  type: PLAYLIST_REMOVE,\n  payload: song\n});\n\nconst updatePlaylistAction = ({\n  previous,\n  current,\n  next\n}) => ({\n  type: UPDATE_PLAYLIST,\n  payload: {\n    previous,\n    current,\n    next\n  }\n});\n\nexport const updatePlaylist = ({\n  previous,\n  current,\n  next\n}) => {\n  return dispatch => {\n    dispatch(updatePlaylistAction({\n      previous,\n      current,\n      next\n    }));\n    if (current && current.albums[0]._id) dispatch(getBackground({\n      id: current === null || current === void 0 ? void 0 : current.albums[0]._id\n    }));\n  };\n};\n\nconst fetchSongsAction = () => ({\n  type: FETCH_SONGS\n});\n\nconst fetchSongsFailure = error => ({\n  type: FETCH_SONGS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchSongsSuccess = playlist => ({\n  type: FETCH_SONGS_SUCCESS,\n  payload: playlist\n});\n\nexport const fetchSongs = ({\n  id,\n  type\n}) => {\n  return dispatch => {\n    dispatch(fetchSongsAction());\n    get(`/api/songs/${type}/${id}`).then(res => {\n      dispatch(fetchSongsSuccess(res.data));\n    }).catch(err => {\n      dispatch(fetchSongsFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/playlistActions.ts"],"names":["get","FETCH_SONGS","FETCH_SONGS_FAILURE","FETCH_SONGS_SUCCESS","PLAYLIST_ADD","PLAYLIST_REMOVE","UPDATE_PLAYLIST","getBackground","setPlaylist","songs","firstSong","nextSongs","slice","length","type","payload","playlistAdd","song","playlistRemove","updatePlaylistAction","previous","current","next","updatePlaylist","dispatch","albums","_id","id","fetchSongsAction","fetchSongsFailure","error","fetchSongsSuccess","playlist","fetchSongs","then","res","data","catch","err","message"],"mappings":"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","sourcesContent":["import get from \"axios\";\nimport { Action, ActionCreator, Dispatch } from \"redux\";\nimport {\n  FETCH_SONGS,\n  FETCH_SONGS_FAILURE,\n  FETCH_SONGS_SUCCESS,\n  FetchSongsAction,\n  FetchSongsFailureAction,\n  FetchSongsSuccessAction,\n  PLAYLIST_ADD,\n  PLAYLIST_REMOVE,\n  PlaylistAddAction,\n  PlaylistRemoveAction,\n  PlaylistState,\n  State,\n  UPDATE_PLAYLIST,\n  UpdatePlaylistAction\n} from \"../types\";\nimport { getBackground } from \"./index\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\n// @ts-ignore\nexport const setPlaylist: any = (songs) => {\n  const firstSong = songs[0];\n  const nextSongs = songs.slice(1, songs.length);\n\n  return {\n    type: UPDATE_PLAYLIST,\n    payload: { firstSong, nextSongs }\n  };\n};\n\nexport const playlistAdd: ActionCreator<PlaylistAddAction> = (song) => ({\n  type: PLAYLIST_ADD,\n  payload: song\n});\n\nexport const playlistRemove: ActionCreator<PlaylistRemoveAction> = (song) => ({\n  type: PLAYLIST_REMOVE,\n  payload: song\n});\n\nconst updatePlaylistAction: ActionCreator<UpdatePlaylistAction> = ({\n  previous,\n  current,\n  next\n}: PlaylistState) => ({\n  type: UPDATE_PLAYLIST,\n  payload: {\n    previous,\n    current,\n    next\n  }\n});\n\nexport const updatePlaylist = ({ previous, current, next }: PlaylistState) => {\n  return (dispatch: ThunkDispatch<State, void, Action>) => {\n    dispatch(updatePlaylistAction({ previous, current, next }));\n    if (current && current.albums[0]._id)\n      dispatch(getBackground({ id: current?.albums[0]._id }));\n  };\n};\n\nconst fetchSongsAction: ActionCreator<FetchSongsAction> = () => ({\n  type: FETCH_SONGS\n});\n\nconst fetchSongsFailure: ActionCreator<FetchSongsFailureAction> = (error) => ({\n  type: FETCH_SONGS_FAILURE,\n  payload: { error }\n});\n\nconst fetchSongsSuccess: ActionCreator<FetchSongsSuccessAction> = (\n  playlist\n) => ({\n  type: FETCH_SONGS_SUCCESS,\n  payload: playlist\n});\n\nexport const fetchSongs = ({\n  id,\n  type\n}: {\n  id: string;\n  type: \"album\" | \"artist\";\n}) => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchSongsAction());\n\n    get(`/api/songs/${type}/${id}`)\n      .then((res) => {\n        dispatch(fetchSongsSuccess(res.data));\n      })\n      .catch((err) => {\n        dispatch(fetchSongsFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}