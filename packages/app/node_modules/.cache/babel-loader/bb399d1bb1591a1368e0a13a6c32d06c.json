{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/views/Menu.tsx\";\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars, faEllipsisH, faRecordVinyl, faUsers } from \"@fortawesome/free-solid-svg-icons\";\nimport { InfoTile } from \"../components/Menu\";\nimport { connect } from \"react-redux\";\nimport { artistsToString } from \"../utils\";\nimport { fetchPlaylist } from \"../store/actions\";\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSongs: (id, type) => dispatch(fetchPlaylist({\n    id,\n    type\n  }))\n});\n\nconst mapStateToProps = state => {\n  var _state$currentSong$ba;\n\n  return {\n    isDark: (_state$currentSong$ba = state.currentSong.background) === null || _state$currentSong$ba === void 0 ? void 0 : _state$currentSong$ba.isDark,\n    playlists: state.playlist.data,\n    artists: state.artists.data,\n    albums: state.albums.data\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst Menu = ({\n  isDark,\n  playlists,\n  albums,\n  artists,\n  fetchSongs\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n  const [selected, setSelected] = useState(\"playlist\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      bottom: isOpen ? 0 : \"-90vh\",\n      transition: \"all 0.5s ease\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      fontSize: \"72px\",\n      position: \"relative\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      height: \"72px\",\n      width: \"128px\",\n      backgroundColor: \"rgba(255, 255, 255, .5)\",\n      borderRadius: \"24px 24px 0 0\",\n      backdropFilter: \"blur(20px)\"\n    },\n    onClick: () => setIsOpen(!isOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEllipsisH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"90vh\",\n      width: \"100vw\",\n      backgroundColor: \"rgba(255, 255, 255, .5)\",\n      backdropFilter: \"blur(20px)\",\n      position: \"relative\",\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\",\n      fontSize: \"72px\",\n      width: \"90vw\",\n      height: \"10vh\",\n      margin: \"0vh 5vw 1vh 5vw\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => setSelected(\"playlist\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faBars,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: selected === \"playlist\" ? \"200%\" : 0,\n      height: \"8px\",\n      backgroundColor: \"black\",\n      position: \"relative\",\n      left: \"-50%\",\n      marginTop: \"8px\",\n      transition: \"all 0.5s ease\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => setSelected(\"artists\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: selected === \"artists\" ? \"200%\" : 0,\n      height: \"8px\",\n      backgroundColor: \"black\",\n      position: \"relative\",\n      left: \"-50%\",\n      marginTop: \"8px\",\n      transition: \"all 0.5s ease\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => setSelected(\"albums\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faRecordVinyl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: selected === \"albums\" ? \"200%\" : 0,\n      height: \"8px\",\n      backgroundColor: \"black\",\n      position: \"relative\",\n      left: \"-50%\",\n      marginTop: \"8px\",\n      transition: \"all 0.5s ease\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"2vh 10vw\",\n      height: \"76vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, selected === \"playlist\" && playlists && playlists.length > 0 ? playlists.map(playlist => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${playlist._id}`,\n    title: playlist.name,\n    subtitle: artistsToString(playlist.artists),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  })) : selected === \"playlist\" && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, \"There are no song playlists currently selected.\"), selected === \"albums\" && albums && albums.length > 0 ? albums.map(album => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${album._id}`,\n    title: album.name,\n    onClick: () => fetchSongs(album._id, \"album\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  })) : selected === \"albums\" && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, \"Sorry no albums have been loaded.\"), selected === \"artists\" && artists && artists.length > 0 ? artists.map(artist => /*#__PURE__*/React.createElement(InfoTile, {\n    key: `info-tile-${artist._id}`,\n    title: artist.name,\n    onClick: () => fetchSongs(artist._id, \"artist\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  })) : selected === \"artists\" && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, \"Sorry no artists have been loaded.\"))));\n};\n\nexport default connector(Menu);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/views/Menu.tsx"],"names":["React","useState","FontAwesomeIcon","faBars","faEllipsisH","faRecordVinyl","faUsers","InfoTile","connect","artistsToString","fetchPlaylist","mapDispatchToProps","dispatch","fetchSongs","id","type","mapStateToProps","state","isDark","currentSong","background","playlists","playlist","data","artists","albums","connector","Menu","isOpen","setIsOpen","selected","setSelected","position","bottom","transition","textAlign","fontSize","left","transform","height","width","backgroundColor","borderRadius","backdropFilter","display","alignItems","justifyContent","margin","marginTop","length","map","_id","name","album","artist"],"mappings":"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","sourcesContent":["import React, { FC, ReactElement, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBars,\n  faEllipsisH,\n  faRecordVinyl,\n  faUsers\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { InfoTile } from \"../components/Menu\";\nimport { State } from \"../store/types\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { artistsToString } from \"../utils\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { fetchPlaylist } from \"../store/actions\";\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  fetchSongs: (id: string, type: \"album\" | \"artist\") =>\n    dispatch(fetchPlaylist({ id, type }))\n});\n\nconst mapStateToProps = (state: State) => ({\n  isDark: state.currentSong.background?.isDark,\n  playlists: state.playlist.data,\n  artists: state.artists.data,\n  albums: state.albums.data\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst Menu: FC<PropsFromRedux> = ({\n  isDark,\n  playlists,\n  albums,\n  artists,\n  fetchSongs\n}): ReactElement => {\n  const [isOpen, setIsOpen] = useState(true);\n  const [selected, setSelected] = useState(\"playlist\");\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        bottom: isOpen ? 0 : \"-90vh\",\n        transition: \"all 0.5s ease\"\n      }}\n    >\n      <div\n        style={{\n          textAlign: \"center\",\n          fontSize: \"72px\",\n          position: \"relative\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          height: \"72px\",\n          width: \"128px\",\n          backgroundColor: \"rgba(255, 255, 255, .5)\",\n          borderRadius: \"24px 24px 0 0\",\n          backdropFilter: \"blur(20px)\"\n        }}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <FontAwesomeIcon icon={faEllipsisH} />\n      </div>\n      <div\n        style={{\n          height: \"90vh\",\n          width: \"100vw\",\n          backgroundColor: \"rgba(255, 255, 255, .5)\",\n          backdropFilter: \"blur(20px)\",\n          position: \"relative\",\n          bottom: 0\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n            fontSize: \"72px\",\n            width: \"90vw\",\n            height: \"10vh\",\n            margin: \"0vh 5vw 1vh 5vw\",\n            textAlign: \"center\"\n          }}\n        >\n          <div onClick={() => setSelected(\"playlist\")}>\n            <FontAwesomeIcon icon={faBars} />\n            <div\n              style={{\n                width: selected === \"playlist\" ? \"200%\" : 0,\n                height: \"8px\",\n                backgroundColor: \"black\",\n                position: \"relative\",\n                left: \"-50%\",\n                marginTop: \"8px\",\n                transition: \"all 0.5s ease\"\n              }}\n            />\n          </div>\n          <div onClick={() => setSelected(\"artists\")}>\n            <FontAwesomeIcon icon={faUsers} />\n            <div\n              style={{\n                width: selected === \"artists\" ? \"200%\" : 0,\n                height: \"8px\",\n                backgroundColor: \"black\",\n                position: \"relative\",\n                left: \"-50%\",\n                marginTop: \"8px\",\n                transition: \"all 0.5s ease\"\n              }}\n            />\n          </div>\n          <div onClick={() => setSelected(\"albums\")}>\n            <FontAwesomeIcon icon={faRecordVinyl} />\n            <div\n              style={{\n                width: selected === \"albums\" ? \"200%\" : 0,\n                height: \"8px\",\n                backgroundColor: \"black\",\n                position: \"relative\",\n                left: \"-50%\",\n                marginTop: \"8px\",\n                transition: \"all 0.5s ease\"\n              }}\n            />\n          </div>\n        </div>\n        <div style={{ margin: \"2vh 10vw\", height: \"76vh\" }}>\n          {selected === \"playlist\" && playlists && playlists.length > 0\n            ? playlists.map((playlist) => (\n                <InfoTile\n                  key={`info-tile-${playlist._id}`}\n                  title={playlist.name}\n                  subtitle={artistsToString(playlist.artists)}\n                />\n              ))\n            : selected === \"playlist\" && (\n                <div style={{ fontSize: \"48px\", textAlign: \"center\" }}>\n                  There are no song playlists currently selected.\n                </div>\n              )}\n          {selected === \"albums\" && albums && albums.length > 0\n            ? albums.map((album) => (\n                <InfoTile key={`info-tile-${album._id}`} title={album.name} onClick={() => fetchSongs(album._id, \"album\")} />\n              ))\n            : selected === \"albums\" && (\n                <div style={{ fontSize: \"48px\", textAlign: \"center\" }}>\n                  Sorry no albums have been loaded.\n                </div>\n              )}\n          {selected === \"artists\" && artists && artists.length > 0\n            ? artists.map((artist) => (\n                <InfoTile key={`info-tile-${artist._id}`} title={artist.name} onClick={() => fetchSongs(artist._id, \"artist\")} />\n              ))\n            : selected === \"artists\" && (\n                <div style={{ fontSize: \"48px\", textAlign: \"center\" }}>\n                  Sorry no artists have been loaded.\n                </div>\n              )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connector(Menu);\n"]},"metadata":{},"sourceType":"module"}