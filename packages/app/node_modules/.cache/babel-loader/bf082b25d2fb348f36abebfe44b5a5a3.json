{"ast":null,"code":"import FastAverageColor from \"fast-average-color\";\nimport { SET_BACKGROUND, SET_SONG, TOGGLE_PLAYING } from \"../types\";\nexport const setCurrentSong = data => ({\n  type: SET_SONG,\n  data\n});\nexport const setBackground = data => ({\n  type: SET_BACKGROUND,\n  data\n});\nexport const togglePlaying = isPlaying => ({\n  type: TOGGLE_PLAYING,\n  isPlaying\n});\nexport const changeSong = ({\n  type,\n  id\n}) => {// return (dispatch: Dispatch, getState: () => State) => {\n  //   const state = getState();\n  //   const songId = id ? id : state.currentSong.data?._id;\n  //   let playlistIndex = -1;\n  //\n  //   state.playlist.data?.forEach(({ _id }: { _id: string }, index: number) => {\n  //     if (songId === _id) playlistIndex = index;\n  //   });\n  //   if (\n  //     state.playlist.data &&\n  //     playlistIndex !== -1 &&\n  //     type === \"NEXT\" &&\n  //     playlistIndex < state.playlist.data.length - 1\n  //   ) {\n  //     dispatch(setCurrentSong(state.playlist?.data[playlistIndex + 1]));\n  //   } else if (\n  //     state.playlist.data &&\n  //     playlistIndex !== -1 &&\n  //     type === \"PREV\" &&\n  //     playlistIndex > 0\n  //   ) {\n  //     dispatch(setCurrentSong(state.playlist?.data[playlistIndex - 1]));\n  //   } else if (id && state.playlist.data && playlistIndex !== -1) {\n  //     dispatch(setCurrentSong(state.playlist?.data[playlistIndex]));\n  //   }\n  // };\n};\nexport const getBackground = ({\n  id\n}) => {\n  return dispatch => {\n    const fac = new FastAverageColor();\n    fac.getColorAsync(`/api/album/art/${id}`).then(color => {\n      const {\n        isLight,\n        isDark,\n        hex: colour\n      } = color;\n      dispatch(setBackground({\n        isLight,\n        isDark,\n        colour\n      }));\n    }).catch(error => {\n      console.error(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/currentSongActions.ts"],"names":["FastAverageColor","SET_BACKGROUND","SET_SONG","TOGGLE_PLAYING","setCurrentSong","data","type","setBackground","togglePlaying","isPlaying","changeSong","id","getBackground","dispatch","fac","getColorAsync","then","color","isLight","isDark","hex","colour","catch","error","console","message"],"mappings":"AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,SAIEC,cAJF,EAKEC,QALF,EAQEC,cARF,QASO,UATP;AAWA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAqC;AACjEC,EAAAA,IAAI,EAAEJ,QAD2D;AAEjEG,EAAAA;AAFiE,CAArC,CAAvB;AAKP,OAAO,MAAME,aAAa,GAAIF,IAAD,KAA2C;AACtEC,EAAAA,IAAI,EAAEL,cADgE;AAEtEI,EAAAA;AAFsE,CAA3C,CAAtB;AAKP,OAAO,MAAMG,aAAa,GAAIC,SAAD,KAA8C;AACzEH,EAAAA,IAAI,EAAEH,cADmE;AAEzEM,EAAAA;AAFyE,CAA9C,CAAtB;AAKP,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEJ,EAAAA,IAAF;AAAQK,EAAAA;AAAR,CAAD,KAA8B,CACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA3BM;AA6BP,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAED,EAAAA;AAAF,CAAD,KAA4B;AACvD,SAAQE,QAAD,IAAwB;AAC7B,UAAMC,GAAG,GAAG,IAAId,gBAAJ,EAAZ;AAEAc,IAAAA,GAAG,CACAC,aADH,CACkB,kBAAiBJ,EAAG,EADtC,EAEGK,IAFH,CAESC,KAAD,IAAoC;AACxC,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA,GAAG,EAAEC;AAAxB,UAAmCJ,KAAzC;AACAJ,MAAAA,QAAQ,CAACN,aAAa,CAAC;AAAEW,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBE,QAAAA;AAAnB,OAAD,CAAd,CAAR;AACD,KALH,EAMGC,KANH,CAMUC,KAAD,IAAkB;AACvBC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD,KARH;AASD,GAZD;AAaD,CAdM","sourcesContent":["import { Dispatch } from \"redux\";\nimport FastAverageColor from \"fast-average-color\";\nimport {\n  Background,\n  ChangeSong,\n  CurrentSongActions,\n  SET_BACKGROUND,\n  SET_SONG,\n  Song,\n  State,\n  TOGGLE_PLAYING\n} from \"../types\";\n\nexport const setCurrentSong = (data: Song): CurrentSongActions => ({\n  type: SET_SONG,\n  data\n});\n\nexport const setBackground = (data: Background): CurrentSongActions => ({\n  type: SET_BACKGROUND,\n  data\n});\n\nexport const togglePlaying = (isPlaying?: boolean): CurrentSongActions => ({\n  type: TOGGLE_PLAYING,\n  isPlaying\n});\n\nexport const changeSong = ({ type, id }: ChangeSong) => {\n  // return (dispatch: Dispatch, getState: () => State) => {\n  //   const state = getState();\n  //   const songId = id ? id : state.currentSong.data?._id;\n  //   let playlistIndex = -1;\n  //\n  //   state.playlist.data?.forEach(({ _id }: { _id: string }, index: number) => {\n  //     if (songId === _id) playlistIndex = index;\n  //   });\n  //   if (\n  //     state.playlist.data &&\n  //     playlistIndex !== -1 &&\n  //     type === \"NEXT\" &&\n  //     playlistIndex < state.playlist.data.length - 1\n  //   ) {\n  //     dispatch(setCurrentSong(state.playlist?.data[playlistIndex + 1]));\n  //   } else if (\n  //     state.playlist.data &&\n  //     playlistIndex !== -1 &&\n  //     type === \"PREV\" &&\n  //     playlistIndex > 0\n  //   ) {\n  //     dispatch(setCurrentSong(state.playlist?.data[playlistIndex - 1]));\n  //   } else if (id && state.playlist.data && playlistIndex !== -1) {\n  //     dispatch(setCurrentSong(state.playlist?.data[playlistIndex]));\n  //   }\n  // };\n};\n\nexport const getBackground = ({ id }: { id: string }) => {\n  return (dispatch: Dispatch) => {\n    const fac = new FastAverageColor();\n\n    fac\n      .getColorAsync(`/api/album/art/${id}`)\n      .then((color: IFastAverageColorResult) => {\n        const { isLight, isDark, hex: colour } = color;\n        dispatch(setBackground({ isLight, isDark, colour }));\n      })\n      .catch((error: Error) => {\n        console.error(error.message);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}