{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_SONG, FETCH_SONG_FAILURE, FETCH_SONG_SUCCESS } from \"../types\";\n\nconst fetchSongAction = () => ({\n  type: FETCH_SONG\n});\n\nconst fetchSongFailure = error => ({\n  type: FETCH_SONG_FAILURE,\n  payload: error\n});\n\nconst fetchSongSuccess = ({\n  albumArt,\n  data,\n  song\n}) => ({\n  type: FETCH_SONG_SUCCESS,\n  payload: {\n    albumArt,\n    data,\n    song\n  }\n});\n\nexport const fetchSong = ({\n  id\n}) => {\n  return (dispatch, getState) => {\n    dispatch(fetchSongAction());\n    const currentArt = getState().currentSong.albumArt;\n    axios.get(\"/api/song/\" + id).then(res => {\n      console.log(res.data);\n      dispatch(fetchSongSuccess(res.data));\n    }).catch(err => {\n      dispatch(fetchSongFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/client/src/store/actions/currentSongActions.ts"],"names":["axios","FETCH_SONG","FETCH_SONG_FAILURE","FETCH_SONG_SUCCESS","fetchSongAction","type","fetchSongFailure","error","payload","fetchSongSuccess","albumArt","data","song","fetchSong","id","dispatch","getState","currentArt","currentSong","get","then","res","console","log","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,UADF,EAEEC,kBAFF,EAGEC,kBAHF,QAQO,UARP;;AAUA,MAAMC,eAA+C,GAAG,OAAO;AAC7DC,EAAAA,IAAI,EAAEJ;AADuD,CAAP,CAAxD;;AAIA,MAAMK,gBAAuD,GAAIC,KAAD,KAAY;AAC1EF,EAAAA,IAAI,EAAEH,kBADoE;AAE1EM,EAAAA,OAAO,EAAED;AAFiE,CAAZ,CAAhE;;AAKA,MAAME,gBAAuD,GAAG,CAAC;AAC/DC,EAAAA,QAD+D;AAE/DC,EAAAA,IAF+D;AAG/DC,EAAAA;AAH+D,CAAD,MAIzD;AACLP,EAAAA,IAAI,EAAEF,kBADD;AAELK,EAAAA,OAAO,EAAE;AACPE,IAAAA,QADO;AAEPC,IAAAA,IAFO;AAGPC,IAAAA;AAHO;AAFJ,CAJyD,CAAhE;;AAiBA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAC9C,SAAO,CAACC,QAAD,EAAqBC,QAArB,KAA+C;AACpDD,IAAAA,QAAQ,CAACX,eAAe,EAAhB,CAAR;AAEA,UAAMa,UAAU,GAAGD,QAAQ,GAAGE,WAAX,CAAuBR,QAA1C;AAEAV,IAAAA,KAAK,CACFmB,GADH,CACO,eAAeL,EADtB,EAEGM,IAFH,CAESC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACV,IAAhB;AACAI,MAAAA,QAAQ,CAACN,gBAAgB,CAACY,GAAG,CAACV,IAAL,CAAjB,CAAR;AACD,KALH,EAMGa,KANH,CAMUC,GAAD,IAAS;AACdV,MAAAA,QAAQ,CAACT,gBAAgB,CAACmB,GAAG,CAACC,OAAL,CAAjB,CAAR;AACD,KARH;AASD,GAdD;AAeD,CAhBM","sourcesContent":["import axios from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  FETCH_SONG,\n  FETCH_SONG_FAILURE,\n  FETCH_SONG_SUCCESS,\n  FetchSongAction,\n  FetchSongFailureAction,\n  FetchSongSuccessAction,\n  State\n} from \"../types\";\n\nconst fetchSongAction: ActionCreator<FetchSongAction> = () => ({\n  type: FETCH_SONG\n});\n\nconst fetchSongFailure: ActionCreator<FetchSongFailureAction> = (error) => ({\n  type: FETCH_SONG_FAILURE,\n  payload: error\n});\n\nconst fetchSongSuccess: ActionCreator<FetchSongSuccessAction> = ({\n  albumArt,\n  data,\n  song\n}) => ({\n  type: FETCH_SONG_SUCCESS,\n  payload: {\n    albumArt,\n    data,\n    song\n  }\n});\n\ninterface FetchSong {\n  id: string;\n}\n\nexport const fetchSong = ({ id }: FetchSong) => {\n  return (dispatch: Dispatch, getState: () => State) => {\n    dispatch(fetchSongAction());\n\n    const currentArt = getState().currentSong.albumArt;\n\n    axios\n      .get(\"/api/song/\" + id)\n      .then((res) => {\n        console.log(res.data)\n        dispatch(fetchSongSuccess(res.data));\n      })\n      .catch((err) => {\n        dispatch(fetchSongFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}