{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_ALBUMS, FETCH_ALBUMS_FAILURE, FETCH_ALBUMS_SUCCESS } from \"../types\";\n\nconst fetchAlbumsAction = () => ({\n  type: FETCH_ALBUMS\n});\n\nconst fetchAlbumsFailure = error => ({\n  type: FETCH_ALBUMS_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchAlbumsSuccess = albums => ({\n  type: FETCH_ALBUMS_SUCCESS,\n  payload: albums\n});\n\nexport const fetchAlbums = () => {\n  return dispatch => {\n    dispatch(fetchAlbumsAction());\n    axios.get(`/api/albums`).then(({\n      data\n    }) => {\n      dispatch(fetchAlbumsSuccess(data));\n      Promise.all(data.map(album => axios.get(`/api/songs/album/${album._id}`).then(songResponse => songResponse))).then(songs => {\n        console.log(songs);\n      });\n    }).catch(err => {\n      dispatch(fetchAlbumsFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/albumsActions.ts"],"names":["axios","FETCH_ALBUMS","FETCH_ALBUMS_FAILURE","FETCH_ALBUMS_SUCCESS","fetchAlbumsAction","type","fetchAlbumsFailure","error","payload","fetchAlbumsSuccess","albums","fetchAlbums","dispatch","get","then","data","Promise","all","map","album","_id","songResponse","songs","console","log","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAEEC,YAFF,EAGEC,oBAHF,EAIEC,oBAJF,QAQO,UARP;;AAUA,MAAMC,iBAAmD,GAAG,OAAO;AACjEC,EAAAA,IAAI,EAAEJ;AAD2D,CAAP,CAA5D;;AAIA,MAAMK,kBAA2D,GAC/DC,KADkE,KAE9D;AACJF,EAAAA,IAAI,EAAEH,oBADF;AAEJM,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAFL,CAF8D,CAApE;;AAOA,MAAME,kBAA2D,GAC/DC,MADkE,KAE9D;AACJL,EAAAA,IAAI,EAAEF,oBADF;AAEJK,EAAAA,OAAO,EAAEE;AAFL,CAF8D,CAApE;;AAOA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AAEAJ,IAAAA,KAAK,CACFa,GADH,CACQ,aADR,EAEGC,IAFH,CAEQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBH,MAAAA,QAAQ,CAACH,kBAAkB,CAACM,IAAD,CAAnB,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CACEF,IAAI,CAACG,GAAL,CAAUC,KAAD,IACPnB,KAAK,CACFa,GADH,CACQ,oBAAmBM,KAAK,CAACC,GAAI,EADrC,EAEGN,IAFH,CAESO,YAAD,IAAkBA,YAF1B,CADF,CADF,EAMEP,IANF,CAMQQ,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARD;AASD,KAbH,EAcGG,KAdH,CAcUC,GAAD,IAAS;AACdd,MAAAA,QAAQ,CAACN,kBAAkB,CAACoB,GAAG,CAACC,OAAL,CAAnB,CAAR;AACD,KAhBH;AAiBD,GApBD;AAqBD,CAtBM","sourcesContent":["import axios from \"axios\";\nimport { ActionCreator, Dispatch } from \"redux\";\nimport {\n  BasicDetails,\n  FETCH_ALBUMS,\n  FETCH_ALBUMS_FAILURE,\n  FETCH_ALBUMS_SUCCESS,\n  FetchAlbumsAction,\n  FetchAlbumsFailureAction,\n  FetchAlbumsSuccessAction\n} from \"../types\";\n\nconst fetchAlbumsAction: ActionCreator<FetchAlbumsAction> = () => ({\n  type: FETCH_ALBUMS\n});\n\nconst fetchAlbumsFailure: ActionCreator<FetchAlbumsFailureAction> = (\n  error\n) => ({\n  type: FETCH_ALBUMS_FAILURE,\n  payload: { error }\n});\n\nconst fetchAlbumsSuccess: ActionCreator<FetchAlbumsSuccessAction> = (\n  albums\n) => ({\n  type: FETCH_ALBUMS_SUCCESS,\n  payload: albums\n});\n\nexport const fetchAlbums = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchAlbumsAction());\n\n    axios\n      .get(`/api/albums`)\n      .then(({ data }) => {\n        dispatch(fetchAlbumsSuccess(data));\n        Promise.all(\n          data.map((album: BasicDetails) =>\n            axios\n              .get(`/api/songs/album/${album._id}`)\n              .then((songResponse) => songResponse)\n          )\n        ).then((songs) => {\n          console.log(songs);\n        });\n      })\n      .catch((err) => {\n        dispatch(fetchAlbumsFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}