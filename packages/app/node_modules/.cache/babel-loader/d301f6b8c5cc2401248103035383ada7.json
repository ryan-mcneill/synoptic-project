{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_PLAYLIST, FETCH_PLAYLIST_FAILURE, FETCH_PLAYLIST_SUCCESS } from \"../types\";\nimport { getBackground, setCurrentSong } from \"./currentSongActions\";\n\nconst fetchPlaylistAction = () => ({\n  type: FETCH_PLAYLIST\n});\n\nconst fetchPlaylistFailure = error => ({\n  type: FETCH_PLAYLIST_FAILURE,\n  payload: {\n    error\n  }\n});\n\nconst fetchPlaylistSuccess = playlist => ({\n  type: FETCH_PLAYLIST_SUCCESS,\n  payload: { ...playlist\n  }\n});\n\nexport const fetchPlaylist = ({\n  id,\n  type\n}) => {\n  return dispatch => {\n    dispatch(fetchPlaylistAction());\n    axios.get(`/api/songs/${type}/${id}`).then(res => {\n      dispatch(fetchPlaylistSuccess(res.data));\n      dispatch(setCurrentSong(res.data[0])); // @ts-ignore\n\n      dispatch(getBackground({\n        id: res.data[0].albums[0]._id\n      }));\n    }).catch(err => {\n      dispatch(fetchPlaylistFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/playlistActions.ts"],"names":["axios","FETCH_PLAYLIST","FETCH_PLAYLIST_FAILURE","FETCH_PLAYLIST_SUCCESS","getBackground","setCurrentSong","fetchPlaylistAction","type","fetchPlaylistFailure","error","payload","fetchPlaylistSuccess","playlist","fetchPlaylist","id","dispatch","get","then","res","data","albums","_id","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,cADF,EAEEC,sBAFF,EAGEC,sBAHF,QAOO,UAPP;AAQA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,sBAA9C;;AAEA,MAAMC,mBAAuD,GAAG,OAAO;AACrEC,EAAAA,IAAI,EAAEN;AAD+D,CAAP,CAAhE;;AAIA,MAAMO,oBAA+D,GACnEC,KADsE,KAElE;AACJF,EAAAA,IAAI,EAAEL,sBADF;AAEJQ,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAFL,CAFkE,CAAxE;;AAOA,MAAME,oBAA+D,GACnEC,QADsE,KAElE;AACJL,EAAAA,IAAI,EAAEJ,sBADF;AAEJO,EAAAA,OAAO,EAAE,EACP,GAAGE;AADI;AAFL,CAFkE,CAAxE;;AASA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAC5BC,EAAAA,EAD4B;AAE5BP,EAAAA;AAF4B,CAAD,KAMvB;AACJ,SAAQQ,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAACT,mBAAmB,EAApB,CAAR;AAEAN,IAAAA,KAAK,CACFgB,GADH,CACQ,cAAaT,IAAK,IAAGO,EAAG,EADhC,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbH,MAAAA,QAAQ,CAACJ,oBAAoB,CAACO,GAAG,CAACC,IAAL,CAArB,CAAR;AACAJ,MAAAA,QAAQ,CAACV,cAAc,CAACa,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAD,CAAf,CAAR,CAFa,CAIb;;AACAJ,MAAAA,QAAQ,CAACX,aAAa,CAAC;AAAEU,QAAAA,EAAE,EAAEI,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,MAAZ,CAAmB,CAAnB,EAAsBC;AAA5B,OAAD,CAAd,CAAR;AACD,KARH,EASGC,KATH,CASUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAACP,oBAAoB,CAACe,GAAG,CAACC,OAAL,CAArB,CAAR;AACD,KAXH;AAYD,GAfD;AAgBD,CAvBM","sourcesContent":["import axios from \"axios\";\nimport { Action, ActionCreator, Dispatch } from \"redux\";\nimport {\n  FETCH_PLAYLIST,\n  FETCH_PLAYLIST_FAILURE,\n  FETCH_PLAYLIST_SUCCESS,\n  FetchPlaylistAction,\n  FetchPlaylistFailureAction,\n  FetchPlaylistSuccessAction\n} from \"../types\";\nimport { getBackground, setCurrentSong } from \"./currentSongActions\";\n\nconst fetchPlaylistAction: ActionCreator<FetchPlaylistAction> = () => ({\n  type: FETCH_PLAYLIST\n});\n\nconst fetchPlaylistFailure: ActionCreator<FetchPlaylistFailureAction> = (\n  error\n) => ({\n  type: FETCH_PLAYLIST_FAILURE,\n  payload: { error }\n});\n\nconst fetchPlaylistSuccess: ActionCreator<FetchPlaylistSuccessAction> = (\n  playlist\n) => ({\n  type: FETCH_PLAYLIST_SUCCESS,\n  payload: {\n    ...playlist\n  }\n});\n\nexport const fetchPlaylist = ({\n  id,\n  type\n}: {\n  id: string;\n  type: \"album\" | \"artist\";\n}) => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchPlaylistAction());\n\n    axios\n      .get(`/api/songs/${type}/${id}`)\n      .then((res) => {\n        dispatch(fetchPlaylistSuccess(res.data));\n        dispatch(setCurrentSong(res.data[0]));\n\n        // @ts-ignore\n        dispatch(getBackground({ id: res.data[0].albums[0]._id }));\n      })\n      .catch((err) => {\n        dispatch(fetchPlaylistFailure(err.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}