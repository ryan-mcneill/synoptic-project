{"ast":null,"code":"import FastAverageColor from \"fast-average-color\";\nimport { SET_BACKGROUND, SET_SONG, TOGGLE_PLAYING } from \"../types\";\nexport const setCurrentSong = data => ({\n  type: SET_SONG,\n  data\n});\nexport const setBackground = data => ({\n  type: SET_BACKGROUND,\n  data\n});\nexport const togglePlaying = () => ({\n  type: TOGGLE_PLAYING\n});\nexport const changeSong = type => {\n  return (dispatch, getState) => {\n    var _state$currentSong$da, _state$playlist$data;\n\n    const state = getState();\n    const currentSongId = (_state$currentSong$da = state.currentSong.data) === null || _state$currentSong$da === void 0 ? void 0 : _state$currentSong$da._id;\n    let playlistIndex = -1;\n    console.log(state);\n    (_state$playlist$data = state.playlist.data) === null || _state$playlist$data === void 0 ? void 0 : _state$playlist$data.forEach(({\n      _id\n    }, index) => {\n      if (currentSongId === _id) playlistIndex = index;\n    });\n\n    if (state.playlist.data && playlistIndex !== -1 && playlistIndex < state.playlist.data.length - 1) {\n      var _state$playlist;\n\n      dispatch(setCurrentSong((_state$playlist = state.playlist) === null || _state$playlist === void 0 ? void 0 : _state$playlist.data[playlistIndex + 1]));\n    }\n  };\n};\nexport const getBackground = ({\n  id\n}) => {\n  return dispatch => {\n    const fac = new FastAverageColor();\n    fac.getColorAsync(`/api/album-art/${id}`).then(color => {\n      const {\n        isLight,\n        isDark,\n        hex: colour\n      } = color;\n      dispatch(setBackground({\n        isLight,\n        isDark,\n        colour\n      }));\n    }).catch(error => {\n      console.error(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/store/actions/currentSongActions.ts"],"names":["FastAverageColor","SET_BACKGROUND","SET_SONG","TOGGLE_PLAYING","setCurrentSong","data","type","setBackground","togglePlaying","changeSong","dispatch","getState","state","currentSongId","currentSong","_id","playlistIndex","console","log","playlist","forEach","index","length","getBackground","id","fac","getColorAsync","then","color","isLight","isDark","hex","colour","catch","error","message"],"mappings":"AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,SAGEC,cAHF,EAIEC,QAJF,EAOEC,cAPF,QAQO,UARP;AAUA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAqC;AACjEC,EAAAA,IAAI,EAAEJ,QAD2D;AAEjEG,EAAAA;AAFiE,CAArC,CAAvB;AAKP,OAAO,MAAME,aAAa,GAAIF,IAAD,KAA2C;AACtEC,EAAAA,IAAI,EAAEL,cADgE;AAEtEI,EAAAA;AAFsE,CAA3C,CAAtB;AAKP,OAAO,MAAMG,aAAa,GAAG,OAA2B;AACtDF,EAAAA,IAAI,EAAEH;AADgD,CAA3B,CAAtB;AAIP,OAAO,MAAMM,UAAU,GAAIH,IAAD,IAAsB;AAC9C,SAAO,CAACI,QAAD,EAAqBC,QAArB,KAA+C;AAAA;;AACpD,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAME,aAAa,4BAAGD,KAAK,CAACE,WAAN,CAAkBT,IAArB,0DAAG,sBAAwBU,GAA9C;AACA,QAAIC,aAAa,GAAG,CAAC,CAArB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AAEA,4BAAAA,KAAK,CAACO,QAAN,CAAed,IAAf,8EAAqBe,OAArB,CAA6B,CAAC;AAAEL,MAAAA;AAAF,KAAD,EAA2BM,KAA3B,KAA6C;AACxE,UAAIR,aAAa,KAAKE,GAAtB,EAA2BC,aAAa,GAAGK,KAAhB;AAC5B,KAFD;;AAGA,QACET,KAAK,CAACO,QAAN,CAAed,IAAf,IACAW,aAAa,KAAK,CAAC,CADnB,IAEAA,aAAa,GAAGJ,KAAK,CAACO,QAAN,CAAed,IAAf,CAAoBiB,MAApB,GAA6B,CAH/C,EAIE;AAAA;;AACAZ,MAAAA,QAAQ,CAACN,cAAc,oBAACQ,KAAK,CAACO,QAAP,oDAAC,gBAAgBd,IAAhB,CAAqBW,aAAa,GAAG,CAArC,CAAD,CAAf,CAAR;AACD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMO,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4B;AACvD,SAAQd,QAAD,IAAwB;AAC7B,UAAMe,GAAG,GAAG,IAAIzB,gBAAJ,EAAZ;AAEAyB,IAAAA,GAAG,CACAC,aADH,CACkB,kBAAiBF,EAAG,EADtC,EAEGG,IAFH,CAESC,KAAD,IAAoC;AACxC,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA,GAAG,EAAEC;AAAxB,UAAmCJ,KAAzC;AACAlB,MAAAA,QAAQ,CAACH,aAAa,CAAC;AAAEsB,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBE,QAAAA;AAAnB,OAAD,CAAd,CAAR;AACD,KALH,EAMGC,KANH,CAMUC,KAAD,IAAkB;AACvBjB,MAAAA,OAAO,CAACiB,KAAR,CAAcA,KAAK,CAACC,OAApB;AACD,KARH;AASD,GAZD;AAaD,CAdM","sourcesContent":["import { Dispatch } from \"redux\";\nimport FastAverageColor from \"fast-average-color\";\nimport {\n  Background, ChangeSong,\n  CurrentSongActions,\n  SET_BACKGROUND,\n  SET_SONG,\n  Song,\n  State,\n  TOGGLE_PLAYING\n} from \"../types\";\n\nexport const setCurrentSong = (data: Song): CurrentSongActions => ({\n  type: SET_SONG,\n  data\n});\n\nexport const setBackground = (data: Background): CurrentSongActions => ({\n  type: SET_BACKGROUND,\n  data\n});\n\nexport const togglePlaying = (): CurrentSongActions => ({\n  type: TOGGLE_PLAYING\n});\n\nexport const changeSong = (type: ChangeSong) => {\n  return (dispatch: Dispatch, getState: () => State) => {\n    const state = getState();\n    const currentSongId = state.currentSong.data?._id;\n    let playlistIndex = -1;\n\n    console.log(state);\n\n    state.playlist.data?.forEach(({ _id }: { _id: string }, index: number) => {\n      if (currentSongId === _id) playlistIndex = index;\n    });\n    if (\n      state.playlist.data &&\n      playlistIndex !== -1 &&\n      playlistIndex < state.playlist.data.length - 1\n    ) {\n      dispatch(setCurrentSong(state.playlist?.data[playlistIndex + 1]));\n    }\n  };\n};\n\nexport const getBackground = ({ id }: { id: string }) => {\n  return (dispatch: Dispatch) => {\n    const fac = new FastAverageColor();\n\n    fac\n      .getColorAsync(`/api/album-art/${id}`)\n      .then((color: IFastAverageColorResult) => {\n        const { isLight, isDark, hex: colour } = color;\n        dispatch(setBackground({ isLight, isDark, colour }));\n      })\n      .catch((error: Error) => {\n        console.error(error.message);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}