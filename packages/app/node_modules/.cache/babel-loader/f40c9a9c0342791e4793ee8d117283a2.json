{"ast":null,"code":"var _jsxFileName = \"/Users/mcneillr/personal/synoptic-project/packages/app/src/components/NowPlaying.tsx\";\nimport React from \"react\";\nimport { fetchPlaylist } from \"../store/actions\";\nimport { connect } from \"react-redux\";\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPlaylist: ({\n    id,\n    type\n  }) => dispatch(fetchPlaylist({\n    id,\n    type\n  }))\n});\n\nconst mapStateToProps = state => {\n  var _state$currentSong$da, _state$currentSong$da2;\n\n  return {\n    artists: (_state$currentSong$da = state.currentSong.data) === null || _state$currentSong$da === void 0 ? void 0 : _state$currentSong$da.artists,\n    songName: (_state$currentSong$da2 = state.currentSong.data) === null || _state$currentSong$da2 === void 0 ? void 0 : _state$currentSong$da2.name\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst NowPlaying = ({\n  artists = [{\n    name: \"Unknown Artist\"\n  }],\n  songName\n}) => {\n  let artistNames = [\"Unknown Artist\"];\n\n  if (artists.length > 0) {\n    // @ts-ignore\n    artistNames = artists.reduce((acc, {\n      name\n    }) => acc.push(name), []);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"24px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"NOW PLAYING\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"48px\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, songName));\n};\n\nexport default connector(NowPlaying);","map":{"version":3,"sources":["/Users/mcneillr/personal/synoptic-project/packages/app/src/components/NowPlaying.tsx"],"names":["React","fetchPlaylist","connect","mapDispatchToProps","dispatch","id","type","mapStateToProps","state","artists","currentSong","data","songName","name","connector","NowPlaying","artistNames","length","reduce","acc","push","fontSize","whiteSpace","overflow","textOverflow"],"mappings":";AAAA,OAAOA,KAAP,MAAoC,OAApC;AAQA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwC,aAAxC;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmD;AAC5EH,EAAAA,aAAa,EAAE,CAAC;AAAEI,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,KACbF,QAAQ,CAACH,aAAa,CAAC;AAAEI,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,CAAd;AAFkE,CAAnD,CAA3B;;AAKA,MAAMC,eAAe,GAAIC,KAAD;AAAA;;AAAA,SAAmB;AACzCC,IAAAA,OAAO,2BAAED,KAAK,CAACE,WAAN,CAAkBC,IAApB,0DAAE,sBAAwBF,OADQ;AAEzCG,IAAAA,QAAQ,4BAAEJ,KAAK,CAACE,WAAN,CAAkBC,IAApB,2DAAE,uBAAwBE;AAFO,GAAnB;AAAA,CAAxB;;AAKA,MAAMC,SAAS,GAAGZ,OAAO,CAACK,eAAD,EAAkBJ,kBAAlB,CAAzB;;AAIA,MAAMY,UAAoC,GAAG,CAAC;AAC5CN,EAAAA,OAAO,GAAG,CAAC;AAAEI,IAAAA,IAAI,EAAE;AAAR,GAAD,CADkC;AAE5CD,EAAAA;AAF4C,CAAD,KAGzB;AAClB,MAAII,WAAW,GAAG,CAAC,gBAAD,CAAlB;;AAEA,MAAIP,OAAO,CAACQ,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACAD,IAAAA,WAAW,GAAGP,OAAO,CAACS,MAAR,CACZ,CAACC,GAAD,EAAgB;AAAEN,MAAAA;AAAF,KAAhB,KAA2CM,GAAG,CAACC,IAAJ,CAASP,IAAT,CAD/B,EAEZ,EAFY,CAAd;AAID;;AAED,sBACE,uDACE;AAAK,IAAA,KAAK,EAAE;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,QAAQ,EAAE,MADL;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,QAAQ,EAAE,QAHL;AAILC,MAAAA,YAAY,EAAE;AAJT,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGZ,QARH,CAFF,CADF;AAeD,CA7BD;;AA+BA,eAAeE,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["import React, { ReactElement } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faStepBackward,\n  faStepForward\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Action } from \"redux\";\nimport { fetchPlaylist } from \"../store/actions\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport {BasicDetails, State} from \"../store/types\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport ReactAudioPlayer from \"react-audio-player\";\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, void, Action>) => ({\n  fetchPlaylist: ({ id, type }: { id: string; type: \"album\" | \"artist\" }) =>\n    dispatch(fetchPlaylist({ id, type }))\n});\n\nconst mapStateToProps = (state: State) => ({\n  artists: state.currentSong.data?.artists,\n  songName: state.currentSong.data?.name\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst NowPlaying: React.FC<PropsFromRedux> = ({\n  artists = [{ name: \"Unknown Artist\" }],\n  songName\n}): ReactElement => {\n  let artistNames = [\"Unknown Artist\"];\n\n  if (artists.length > 0) {\n    // @ts-ignore\n    artistNames = artists.reduce(\n      (acc: string[], { name }: BasicDetails) => acc.push(name),\n      []\n    );\n  }\n\n  return (\n    <>\n      <div style={{ fontSize: \"24px\" }}>NOW PLAYING</div>\n      <div\n        style={{\n          fontSize: \"48px\",\n          whiteSpace: \"nowrap\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        }}\n      >\n        {songName}\n      </div>\n    </>\n  );\n};\n\nexport default connector(NowPlaying);\n"]},"metadata":{},"sourceType":"module"}